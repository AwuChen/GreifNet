{"version":3,"sources":["migrateTimestamps.js","CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["migrateTimestamps","driver","a","session","console","log","run","timestamp","Date","now","error","close","CypherViz","startBreathingAnimation","breathingInterval","clearInterval","setInterval","state","isUserActive","fgRef","current","triggerBreathingCycle","stopBreathingAnimation","breathingState","expandNodes","contractNodes","graph","currentStrength","strengthIncrement","rampUpForce","d3Force","d3","strength","d3ReheatSimulation","setTimeout","rampDuration","strengthDecrement","rampDownForce","updateUserActivity","wasActive","setState","lastUserActivity","scaleTransitionStart","forceUpdate","idleTimeout","clearTimeout","checkIdleAndReturnToDefault","processingMutation","customQueryActive","customQueryTimeout","loadData","defaultQuery","startIdleDetection","forEach","event","document","addEventListener","idleCheckInterval","stopIdleDetection","removeEventListener","addTimestampsToMutationQuery","query","trimmedQuery","trim","test","isNFCOperation","processedQuery","replace","match","alias","properties","newProperties","endsWith","slice","nameMatch","name","setClause","includes","newSetClause","source","target","newNodeName","queryOverride","database","isCustomQuery","queryToExecute","pendingNFCNode","isMutationQuery","validStartKeywords","queryStart","toUpperCase","some","keyword","startsWith","alert","res","mutationReloadTimeout","pendingNode","focusOnNewNode","data","nodes","links","nodesMap","Map","records","record","has","get","set","role","location","website","x","Math","random","y","push","warn","keys","key","node","identity","low","u_name","u_role","u_location","u_website","Array","from","values","updatedData","find","n","currentDataHash","calculateDataHash","hasChanged","lastDataHash","hasDetailedChange","isInitialLoad","hasDataChanged","isDataIdentical","JSON","stringify","localStorage","setItem","timeSinceLastUpdate","lastUpdateTime","forceUpdateForNFC","updateDebounceTime","updateCount","maxUpdatesPerCycle","nodeToSet","latestNode","changedNodesFromPolling","length","firstChangedNode","focusOnPollingNode","pollingFocusTimeout","pollingFocusNode","nodeName","graphData","attemptFocus","attempt","newNode","centerAt","zoom","focusOnMultipleNodes","nodeNames","nodesStr","map","sort","join","linksStr","l","newData","oldData","changedNodes","hasChanges","oldNodesMap","oldNode","oldLinksSet","Set","newLink","startPolling","pollingInterval","isPolling","hidden","updateCountResetInterval","stopPolling","connectWebSocket","disconnectWebSocket","websocket","wsConnected","useWebSocket","addNodeNFC","newUser","nfcUserName","capitalizedNewUser","capitalizeWords","str","split","word","charAt","toLowerCase","capitalizedNfcUser","user","checkExistingUser","nodeToFocus","duplicateCheck","duplicateCount","toNumber","allNodes","bestRole","bestLocation","bestWebsite","createdAt","nfcUser","checkCount","waitForStateUpdate","nodeExists","refreshTimelineStats","nfcNodeForAutoPopup","handleChange","newQuery","value","resetQuery","validateAndCleanQuery","currentQuery","onNfcPopupTriggered","toggleTimelineMode","timelineMode","getTimelineStats","stats","validStats","earliest","latest","prevState","timelineDate","timelineData","timelineStats","loadTimelineData","date","getTime","result","sourceRole","targetRole","sourceLocation","targetLocation","sourceWebsite","targetWebsite","add","updateTimelineDate","earliestDate","convertTimestamp","numTimestamp","Number","minValid","maxValid","secondsTimestamp","latestDate","resetToCurrentTime","newTimelineDate","React","createRef","defaultData","breathingAnimation","scaleTransitionDuration","this","handleVisibilityChange","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","toString","substr","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","analyticalAnswer","setAnalyticalAnswer","showAnalyticalModal","setShowAnalyticalModal","relationshipNote","setRelationshipNote","nfcNameInput","setNfcNameInput","nfcRoleInput","setNfcRoleInput","showNfcNamePopup","setShowNfcNamePopup","showProfilePopup","setShowProfilePopup","pendingNfcName","setPendingNfcName","selectedLink","setSelectedLink","relationshipData","setRelationshipData","showNfcRelationshipPopup","setShowNfcRelationshipPopup","currentNfcConnection","setCurrentNfcConnection","hoveredLink","setHoveredLink","nfcNode","neighbors","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","filter","neighbor","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","isReportRequest","isTrueAnalyticalQuestion","pattern","report","generateNetworkReport","displayNetworkReport","answer","generateAnalyticalAnswer","displayAnalyticalAnswer","extractedNodes","deleteMatches","Boolean","matchClause","nodeMatches","handleLinkClick","relationshipResult","note","handleLinkHover","handleEditChange","prev","saveRelationshipNote","holderName","fallbackResult","existingName","nfcHolderResult","nfcHolderName","updateResult","handleNfcNameSubmit","capitalizedName","existingNodeCheck","existingNode","visitorName","saveNewProfileFromNfc","newName","questionLower","count","locations","uniqueLocations","roles","uniqueRoles","names","resultCount","connections","users","userConnections","connectionNote","connectionTime","time","topConnectors","entries","b","u","connector","index","round","formattedReport","htmlReport","isHtml","type","placeholder","display","margin","border","borderRadius","onChange","input","onKeyPress","id","onClick","open","position","bottom","left","transform","backgroundColor","boxShadow","zIndex","minWidth","alignItems","gap","marginBottom","newDate","cursor","step","parseInt","flex","toLocaleDateString","toLocaleTimeString","hour","minute","justifyContent","second","marginTop","top","right","animation","maxWidth","maxHeight","overflow","stopPropagation","background","dangerouslySetInnerHTML","__html","overflowY","ref","nodeId","nodeLabel","linkLabel","onNodeClick","onNodeHover","onLinkClick","onLinkHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","nodeRadius","floor","transitionProgress","breathingScale","sin","fillColor","currentColorShift","colorShift","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","shadowBlur","firstName","fillText","linkColor","isConnected","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","marginRight","href","substring","minHeight","resize","fontStyle","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7fb86d8e.chunk.js","sourcesContent":["// Migration script to add timestamps to existing data\r\n// Run this once to add createdAt properties to existing nodes and relationships\r\n\r\nconst migrateTimestamps = async (driver) => {\r\n  const session = driver.session();\r\n  try {\r\n    console.log('Starting timestamp migration...');\r\n    \r\n    // Add createdAt to nodes that don't have it\r\n    const nodeResult = await session.run(\r\n      `MATCH (u:User)\r\n       WHERE u.createdAt IS NULL\r\n       SET u.createdAt = $timestamp\r\n       RETURN count(u) as updatedNodes`,\r\n      { timestamp: Date.now() }\r\n    );\r\n    \r\n\r\n    \r\n    // Add createdAt to relationships that don't have it\r\n    const relResult = await session.run(\r\n      `MATCH ()-[r:CONNECTED_TO]->()\r\n       WHERE r.createdAt IS NULL\r\n       SET r.createdAt = $timestamp\r\n       RETURN count(r) as updatedRelationships`,\r\n      { timestamp: Date.now() }\r\n    );\r\n    \r\n\r\n    \r\n\r\n    \r\n  } catch (error) {\r\n    console.error('Error during timestamp migration:', error);\r\n  } finally {\r\n    session.close();\r\n  }\r\n};\r\n\r\nexport default migrateTimestamps;\r\n","import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport * as d3 from 'd3';\nimport migrateTimestamps from './migrateTimestamps';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n      latestNode: null, // For NFC editing\n      pollingFocusNode: null, // For polling focus (non-editable)\n      lastUpdateTime: null,\n      isPolling: false,\n      useWebSocket: false,\n      wsConnected: false,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false,\n      lastUserActivity: Date.now(),\n      isUserActive: true,\n      nfcNodeForAutoPopup: null, // For auto-popup form on NFC tap\n      timelineMode: false, // Timeline mode toggle\n      timelineDate: null, // Current timeline date\n      timelineData: null, // Timeline-specific data\n    };\n\n    // Store the default query for polling (separate from user input)\n    this.defaultQuery = `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n        RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n        v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`;\n\n    // Store the last known data hash for change detection\n    this.lastDataHash = null;\n    this.pollingInterval = null;\n    this.websocket = null;\n    this.lastUpdateTime = 0;\n    this.updateDebounceTime = 2000; // 2 seconds debounce\n    this.updateCount = 0;\n    this.maxUpdatesPerCycle = 3; // Prevent infinite loops\n    this.mutationReloadTimeout = null;\n    this.idleTimeout = null;\n    this.idleCheckInterval = null;\n    this.isNFCOperation = false; // Flag to prevent double reload during NFC operations\n    this.changedNodesFromPolling = []; // Track nodes changed during polling\n    this.isInitialLoad = true; // Flag to prevent focusing on initial load\n    this.pollingFocusTimeout = null; // Timeout to clear polling focus\n    this.breathingAnimation = null; // For breathing animation\n    this.breathingState = 'expanded'; // 'contracted' or 'expanded'\n    this.breathingInterval = null; // Interval for breathing cycle\n    this.scaleTransitionStart = null; // For smooth scaling transition\n    this.scaleTransitionDuration = 1000; // 1 second transition\n\n  }\n\n  // Breathing animation methods\n  startBreathingAnimation = () => {\n    if (this.breathingInterval) {\n      clearInterval(this.breathingInterval);\n    }\n    \n    // Start breathing cycle every 4 seconds\n    this.breathingInterval = setInterval(() => {\n      if (!this.state.isUserActive && this.fgRef.current) {\n        this.triggerBreathingCycle();\n      }\n    }, 4000); // 4 second cycle\n  };\n\n  stopBreathingAnimation = () => {\n    if (this.breathingInterval) {\n      clearInterval(this.breathingInterval);\n      this.breathingInterval = null;\n    }\n    \n    // Reset to expanded state when stopping and clean up forces\n    if (this.fgRef.current && this.breathingState === 'contracted') {\n      this.expandNodes();\n    }\n  };\n\n  triggerBreathingCycle = () => {\n    if (this.breathingState === 'expanded') {\n      this.contractNodes();\n    } else {\n      this.expandNodes();\n    }\n  };\n\n  contractNodes = () => {\n    if (!this.fgRef.current) return;\n    \n    this.breathingState = 'contracted';\n    \n    // Get the current graph instance\n    const graph = this.fgRef.current;\n    \n    // Start with very low strength and gradually increase for smooth transition\n    let currentStrength = 0.01;\n    const targetStrength = 0.05;\n    const rampDuration = 2000; // 2 seconds to ramp up\n    const rampSteps = 20;\n    const strengthIncrement = (targetStrength - currentStrength) / rampSteps;\n    const stepInterval = rampDuration / rampSteps;\n    \n    const rampUpForce = () => {\n      if (currentStrength < targetStrength) {\n        currentStrength += strengthIncrement;\n        graph.d3Force('breathing-attraction', d3.forceRadial(0, 0, 10).strength(currentStrength));\n        graph.d3ReheatSimulation();\n        setTimeout(rampUpForce, stepInterval);\n      }\n    };\n    \n    // Start the gradual ramp-up\n    rampUpForce();\n    \n    // After 10 seconds, expand back (5x slower)\n    setTimeout(() => {\n      this.expandNodes();\n    }, 10000);\n  };\n\n  expandNodes = () => {\n    if (!this.fgRef.current) return;\n    \n    this.breathingState = 'expanded';\n    \n    // Get the current graph instance\n    const graph = this.fgRef.current;\n    \n    // Gradually reduce the breathing force for smooth expansion\n    const currentForce = graph.d3Force('breathing-attraction');\n    if (currentForce) {\n      let currentStrength = 0.05;\n      const rampDuration = 2000; // 2 seconds to ramp down\n      const rampSteps = 20;\n      const strengthDecrement = currentStrength / rampSteps;\n      const stepInterval = rampDuration / rampSteps;\n      \n      const rampDownForce = () => {\n        if (currentStrength > 0.001) {\n          currentStrength -= strengthDecrement;\n          graph.d3Force('breathing-attraction', d3.forceRadial(0, 0, 10).strength(currentStrength));\n          graph.d3ReheatSimulation();\n          setTimeout(rampDownForce, stepInterval);\n        } else {\n          // Completely remove the force when it's very small\n          graph.d3Force('breathing-attraction', null);\n          graph.d3ReheatSimulation();\n        }\n      };\n      \n      // Start the gradual ramp-down\n      rampDownForce();\n    }\n  };\n\n  // Update user activity timestamp\n  updateUserActivity = () => {\n    const now = Date.now();\n    const wasActive = this.state.isUserActive;\n    \n    this.setState({ \n      lastUserActivity: now,\n      isUserActive: true \n    });\n    \n    // If user just became active, stop breathing animation and start scale transition immediately\n    if (!wasActive) {\n      this.stopBreathingAnimation();\n      // Capture the exact breathing state at this moment to prevent jitter\n      this.scaleTransitionStart = now;\n      // Force an immediate re-render to start the transition\n      this.forceUpdate();\n    }\n    \n    // Clear existing idle timeout\n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n    }\n    \n    // Set new idle timeout (5 seconds of inactivity)\n    this.idleTimeout = setTimeout(() => {\n      this.setState({ isUserActive: false });\n      // Start breathing animation when user becomes idle\n      this.startBreathingAnimation();\n    }, 5000); // 5 seconds of inactivity\n  };\n\n  // Check if user is idle and should return to default query\n  checkIdleAndReturnToDefault = () => {\n    // Don't interfere if a mutation is being processed\n    if (this.state.processingMutation) {\n      return;\n    }\n    \n    if (this.state.customQueryActive && !this.state.isUserActive) {\n      this.setState({ \n        customQueryActive: false, \n        customQueryTimeout: null \n      });\n      \n      // Clear any existing timeout\n      if (this.state.customQueryTimeout) {\n        clearTimeout(this.state.customQueryTimeout);\n      }\n      \n      // Reload with default query\n      this.loadData(null, this.defaultQuery);\n    }\n  };\n\n  // Start idle detection system\n  startIdleDetection = () => {\n    // Set up activity listeners\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.addEventListener(event, this.updateUserActivity, true);\n    });\n    \n    // Check for idle state every 2 seconds\n    this.idleCheckInterval = setInterval(() => {\n      this.checkIdleAndReturnToDefault();\n    }, 2000);\n    \n    // Initial activity update\n    this.updateUserActivity();\n  };\n\n  // Stop idle detection\n  stopIdleDetection = () => {\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.removeEventListener(event, this.updateUserActivity, true);\n    });\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n      this.idleTimeout = null;\n    }\n  };\n\n  // Add timestamps to mutation queries automatically\n  addTimestampsToMutationQuery = (query) => {\n    if (!query || typeof query !== 'string') return query;\n    \n    const trimmedQuery = query.trim();\n    const timestamp = Date.now();\n    \n    // Check if this is a mutation query\n    const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(trimmedQuery);\n    if (!isMutationQuery) return query;\n    \n    // Skip processing if this is an NFC operation to prevent duplicate timestamps\n    if (this.isNFCOperation) {\n      console.log('Skipping timestamp processing for NFC operation');\n      return query;\n    }\n    \n    console.log(`Processing mutation query with timestamps: ${query}`);\n    \n    let processedQuery = query;\n    \n    // Add timestamps to CREATE User operations\n    processedQuery = processedQuery.replace(\n      /CREATE\\s*\\(([^:]+):User\\s*\\{([^}]*)\\}\\)/gi,\n      (match, alias, properties) => {\n        // Remove existing createdAt if present\n        const cleanProperties = properties.replace(/createdAt\\s*:\\s*[^,}]+/g, '');\n        // Add timestamp - handle trailing comma and closing brace properly\n        let newProperties = cleanProperties.trim();\n        if (newProperties.endsWith(',')) {\n          newProperties = newProperties.slice(0, -1); // Remove trailing comma\n        }\n        newProperties = `${newProperties}, createdAt: ${timestamp}`;\n        \n        // Extract name property for MERGE matching\n        const nameMatch = properties.match(/name\\s*:\\s*['\"]([^'\"]+)['\"]/);\n        if (nameMatch) {\n          const name = nameMatch[1];\n          // Use MERGE with name only, then set other properties on CREATE\n          return `MERGE (${alias}:User {name: '${name}'}) ON CREATE SET ${alias}.createdAt = ${timestamp}`;\n        }\n        \n        return `CREATE (${alias}:User {${newProperties}})`;\n      }\n    );\n    \n    // Add timestamps to MERGE User operations with ON CREATE\n    processedQuery = processedQuery.replace(\n      /MERGE\\s*\\(([^:]+):User\\s*\\{([^}]*)\\}\\)\\s*ON CREATE SET\\s*([^}]*)/gi,\n      (match, alias, properties, setClause) => {\n        // Add createdAt to ON CREATE SET if not present\n        if (!setClause.includes('createdAt')) {\n          let newSetClause = setClause.trim();\n          if (newSetClause.endsWith(',')) {\n            newSetClause = newSetClause.slice(0, -1); // Remove trailing comma\n          }\n          newSetClause = `${newSetClause}, ${alias}.createdAt = ${timestamp}`;\n          return `MERGE (${alias}:User {${properties}}) ON CREATE SET ${newSetClause}`;\n        }\n        return match;\n      }\n    );\n    \n    // Add timestamps to relationship creation (various patterns)\n    // Pattern 1: CREATE (a)-[:CONNECTED_TO]->(b)\n    processedQuery = processedQuery.replace(\n      /CREATE\\s*\\(([^)]+)\\)-\\[:CONNECTED_TO\\]->\\(([^)]+)\\)/gi,\n      (match, source, target) => {\n        return `CREATE (${source})-[r:CONNECTED_TO]->(${target}) SET r.createdAt = ${timestamp}`;\n      }\n    );\n    \n    // Pattern 2: CREATE (a)-[r:CONNECTED_TO]->(b)\n    processedQuery = processedQuery.replace(\n      /CREATE\\s*\\(([^)]+)\\)-\\[([^:]+):CONNECTED_TO\\]->\\(([^)]+)\\)/gi,\n      (match, source, alias, target) => {\n        return `CREATE (${source})-[${alias}:CONNECTED_TO]->(${target}) SET ${alias}.createdAt = ${timestamp}`;\n      }\n    );\n    \n    // Pattern 3: MERGE (a)-[:CONNECTED_TO]->(b) ON CREATE SET\n    processedQuery = processedQuery.replace(\n      /MERGE\\s*\\(([^)]+)\\)-\\[:CONNECTED_TO\\]->\\(([^)]+)\\)\\s*ON CREATE SET\\s*([^}]*)/gi,\n      (match, source, target, setClause) => {\n        if (!setClause.includes('createdAt')) {\n          let newSetClause = setClause.trim();\n          if (newSetClause.endsWith(',')) {\n            newSetClause = newSetClause.slice(0, -1); // Remove trailing comma\n          }\n          newSetClause = `${newSetClause}, r.createdAt = ${timestamp}`;\n          return `MERGE (${source})-[r:CONNECTED_TO]->(${target}) ON CREATE SET ${newSetClause}`;\n        }\n        return match;\n      }\n    );\n    \n    // Pattern 4: MERGE (a)-[r:CONNECTED_TO]->(b) ON CREATE SET\n    processedQuery = processedQuery.replace(\n      /MERGE\\s*\\(([^)]+)\\)-\\[([^:]+):CONNECTED_TO\\]->\\(([^)]+)\\)\\s*ON CREATE SET\\s*([^}]*)/gi,\n      (match, source, alias, target, setClause) => {\n        if (!setClause.includes('createdAt')) {\n          let newSetClause = setClause.trim();\n          if (newSetClause.endsWith(',')) {\n            newSetClause = newSetClause.slice(0, -1); // Remove trailing comma\n          }\n          newSetClause = `${newSetClause}, ${alias}.createdAt = ${timestamp}`;\n          return `MERGE (${source})-[${alias}:CONNECTED_TO]->(${target}) ON CREATE SET ${newSetClause}`;\n        }\n        return match;\n      }\n    );\n    \n    // Pattern 5: MERGE (a)-[:CONNECTED_TO]->(b) (without ON CREATE)\n    processedQuery = processedQuery.replace(\n      /MERGE\\s*\\(([^)]+)\\)-\\[:CONNECTED_TO\\]->\\(([^)]+)\\)/gi,\n      (match, source, target) => {\n        return `MERGE (${source})-[r:CONNECTED_TO]->(${target}) ON CREATE SET r.createdAt = ${timestamp}`;\n      }\n    );\n    \n    // Pattern 6: MERGE (a)-[r:CONNECTED_TO]->(b) (without ON CREATE)\n    processedQuery = processedQuery.replace(\n      /MERGE\\s*\\(([^)]+)\\)-\\[([^:]+):CONNECTED_TO\\]->\\(([^)]+)\\)(?!\\s*ON CREATE)/gi,\n      (match, source, alias, target) => {\n        return `MERGE (${source})-[${alias}:CONNECTED_TO]->(${target}) ON CREATE SET ${alias}.createdAt = ${timestamp}`;\n      }\n    );\n    \n    console.log(`Processed mutation query with timestamps: ${processedQuery}`);\n    return processedQuery;\n  };\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    \n    // Determine which query to use\n    let queryToExecute = queryOverride;\n    let isCustomQuery = false;\n    \n    if (!queryToExecute) {\n      // For polling, use default query unless a custom query is active\n      if (newNodeName === null && !queryOverride && !this.state.customQueryActive) {\n        queryToExecute = this.defaultQuery;\n      } else {\n        // For user-initiated queries, use state.query but validate it\n        queryToExecute = this.state.query;\n        isCustomQuery = true;\n      }\n    } else if (queryOverride !== this.defaultQuery) {\n      // If a custom query is being executed\n      isCustomQuery = true;\n    }\n    \n    // Special handling for NFC operations - if we have a pending NFC node, \n    // we should use the default query to reload the graph after mutation\n    if (newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode) {\n      queryToExecute = this.defaultQuery;\n      isCustomQuery = false;\n    }\n    \n\n    \n    // Check if this is a mutation query BEFORE determining if it's custom\n    const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(queryToExecute.trim());\n    \n    // If it's a mutation query, it should never be treated as a custom query\n    if (isMutationQuery) {\n      isCustomQuery = false;\n    }\n    \n    // Validate the query\n    if (!queryToExecute || typeof queryToExecute !== 'string' || queryToExecute.trim() === '') {\n      console.error(\"Invalid query:\", queryToExecute);\n      return;\n    }\n    \n    // Check if query starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = queryToExecute.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      return;\n    }\n    \n    // Block DELETE operations for user safety\n    const isDeleteQuery = /(DELETE|DETACH DELETE|REMOVE)/i.test(queryToExecute.trim());\n    if (isDeleteQuery) {\n      alert('DELETE operations are not allowed for safety reasons. Please use other operations like CREATE, MERGE, or SET.');\n      return;\n    }\n    \n    try {\n      // Preprocess mutation queries to add timestamps\n      let processedQuery = queryToExecute;\n      if (isMutationQuery && !this.isNFCOperation) {\n        processedQuery = this.addTimestampsToMutationQuery(queryToExecute);\n      }\n  \n      res = await session.run(processedQuery);\n      \n              // Handle mutations for ALL queries (not just custom ones)\n        if (isMutationQuery) {\n        // For mutation queries, immediately return to default query\n        \n        // Force return to default state regardless of idle detection\n        this.setState({ \n          customQueryActive: false, \n          customQueryTimeout: null,\n          processingMutation: true,\n          isUserActive: true // Temporarily mark as active to prevent idle interference\n        });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Prevent multiple mutation reloads\n        if (this.mutationReloadTimeout) {\n          clearTimeout(this.mutationReloadTimeout);\n        }\n        \n        // Store the pending NFC node before reloading\n        const pendingNode = this.pendingNFCNode;\n        \n        // For NFC operations, don't trigger another reload since addNodeNFC already handles it\n        if (this.isNFCOperation) {\n          // Skip additional reload for NFC operations\n        } else if (!this.state.processingMutation) {\n          // Immediately reload with default query to show updated graph\n          this.loadData(pendingNode, this.defaultQuery);\n        }\n        \n        this.setState({ processingMutation: false });\n        this.mutationReloadTimeout = null;\n        \n        // For NFC operations, focusing is handled in addNodeNFC, so skip here\n        if (pendingNode && !this.isNFCOperation) {\n          setTimeout(() => {\n            this.focusOnNewNode(pendingNode, this.state.data);\n            this.pendingNFCNode = null;\n          }, 1500);\n        } else if (this.isNFCOperation) {\n          // NFC operation - focusing will be handled by addNodeNFC\n        } else {\n          // Reset NFC operation flag if no pending node\n          this.isNFCOperation = false;\n        }\n        \n        // Reset user activity state after a short delay to allow idle detection to work normally\n        setTimeout(() => {\n          this.updateUserActivity();\n        }, 100);\n        \n        // Return early to prevent processing mutation query results\n        return;\n      } else if (isCustomQuery) {\n        // For non-mutation custom queries, activate custom query state\n        this.setState({ customQueryActive: true });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Update user activity to reset idle timer\n        this.updateUserActivity();\n      }\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      console.error(\"Query was:\", queryToExecute);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            location: record.get(\"sourceLocation\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            location: record.get(\"targetLocation\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node && node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                location: node.properties.location || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (node && typeof node === 'object') {\n            // Handle SET query results that might have different structure\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.role || node.u_role || \"\",\n                location: node.location || node.u_location || \"\",\n                website: node.website || node.u_website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (typeof node === 'string' && key.includes('name')) {\n            // Handle direct string values from queries like RETURN u.name, u.role\n            const name = node;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: record.get(key.replace('name', 'role')) || \"\",\n                location: record.get(key.replace('name', 'location')) || \"\",\n                website: record.get(key.replace('name', 'website')) || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n    \n    // Check if our NFC node is in the parsed results\n    if (this.pendingNFCNode) {\n      const nfcNodeInResults = nodes.find(n => n.name === this.pendingNFCNode);\n    }\n\n    // Calculate hash of current data for change detection\n    const currentDataHash = this.calculateDataHash(updatedData);\n    const hasChanged = this.lastDataHash !== currentDataHash;\n    \n    // Also use more detailed change detection (but not during initial load)\n    const hasDetailedChange = this.isInitialLoad ? false : this.hasDataChanged(updatedData, this.state.data);\n    \n    // Additional check: if the data is exactly the same, don't update\n    const isDataIdentical = JSON.stringify(updatedData) === JSON.stringify(this.state.data);\n    \n\n    \n\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    \n    // Only update state if there's a change or if it's the initial load\n    const now = Date.now();\n    const timeSinceLastUpdate = now - this.lastUpdateTime;\n    \n    // Force update if we have a newNodeName (NFC operation) regardless of debounce\n    const forceUpdateForNFC = newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode;\n    \n    if ((hasChanged || hasDetailedChange || this.lastDataHash === null || forceUpdateForNFC) && \n        !isDataIdentical &&\n        (timeSinceLastUpdate > this.updateDebounceTime || this.lastDataHash === null || forceUpdateForNFC) &&\n        this.updateCount < this.maxUpdatesPerCycle) {\n      // Update the hash only when we actually update the state\n      this.lastDataHash = currentDataHash;\n      this.lastUpdateTime = now;\n      this.updateCount++;\n      \n      // Mark initial load as complete after first successful update\n      if (this.isInitialLoad) {\n        this.isInitialLoad = false;\n      }\n      \n      // Preserve latestNode if newNodeName is null but we have a valid latestNode\n      // Don't set latestNode during initial load\n      const nodeToSet = this.isInitialLoad ? null : (newNodeName || this.state.latestNode);\n      this.setState({ \n        data: updatedData, \n        latestNode: nodeToSet,\n        lastUpdateTime: hasChanged ? now : this.state.lastUpdateTime\n      }, () => {\n      if (newNodeName) {\n        // Focus on the new node with multiple attempts to ensure it works (NFC editing)\n        this.focusOnNewNode(newNodeName, updatedData);\n      } else if (this.changedNodesFromPolling.length > 0 && !this.isInitialLoad) {\n        // Focus on the first changed node from polling (but not on initial load) - non-editable\n        const firstChangedNode = this.changedNodesFromPolling[0];\n        this.focusOnPollingNode(firstChangedNode, updatedData);\n        \n        // Set a 10-second timeout to clear the focus\n        if (this.pollingFocusTimeout) {\n          clearTimeout(this.pollingFocusTimeout);\n        }\n        this.pollingFocusTimeout = setTimeout(() => {\n          this.setState({ pollingFocusNode: null });\n          this.pollingFocusTimeout = null;\n        }, 10000); // 10 seconds\n        \n        // Clear the changed nodes list after focusing\n        this.changedNodesFromPolling = [];\n      }\n    });\n    } else {\n      // Even if no change, we might need to update latestNode for new additions\n      if (newNodeName && this.state.latestNode !== newNodeName) {\n        this.setState({ latestNode: newNodeName });\n      }\n      // Reset update count when no changes are detected\n      this.updateCount = 0;\n    }\n  };\n\n    // Focus on a newly added node with multiple attempts\n  focusOnNewNode = (nodeName, graphData) => {\n    \n    const attemptFocus = (attempt = 1) => {\n      if (attempt > 5) {\n        return;\n      }\n\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\n      if (!newNode) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      if (!this.fgRef.current) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      try {\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n            this.fgRef.current.zoom(1.25);\n        \n        // Also ensure the latestNode state is set\n        this.setState({ latestNode: nodeName });\n      } catch (error) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n      }\n    };\n\n    // Start with a longer delay for the first attempt to ensure graph is rendered\n    setTimeout(() => attemptFocus(1), 1000);\n  };\n\n  // Focus on polling changes (non-editable - sets pollingFocusNode)\n  focusOnPollingNode = (nodeName, graphData) => {\n    \n    const attemptFocus = (attempt = 1) => {\n      if (attempt > 5) {\n        return;\n      }\n\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\n      if (!newNode) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      if (!this.fgRef.current) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      try {\n        this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n        this.fgRef.current.zoom(1.25);\n        \n        // Set pollingFocusNode (non-editable)\n        this.setState({ pollingFocusNode: nodeName });\n      } catch (error) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n      }\n    };\n\n    // Start with a longer delay for the first attempt to ensure graph is rendered\n    setTimeout(() => attemptFocus(1), 1000);\n  };\n\n  // Focus on multiple nodes (for future use)\n  focusOnMultipleNodes = (nodeNames, graphData) => {\n    if (!nodeNames || nodeNames.length === 0) return;\n    \n    // For now, focus on the first node\n    // In the future, this could calculate a bounding box of all nodes\n    this.focusOnNewNode(nodeNames[0], graphData);\n  };\n\n  // Calculate a simple hash of the graph data for change detection\n  calculateDataHash = (data) => {\n    // Only hash the actual data, not the random coordinates\n    const nodesStr = data.nodes.map(n => `${n.name}:${n.role}:${n.location}:${n.website}`).sort().join('|');\n    const linksStr = data.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }).sort().join('|');\n    return `${nodesStr}|${linksStr}`;\n  };\n\n  // More detailed change detection with change tracking\n  hasDataChanged = (newData, oldData) => {\n    if (!oldData || !oldData.nodes || !oldData.links) return true;\n    \n    let changedNodes = [];\n    let hasChanges = false;\n    \n    // Check if number of nodes or links changed\n    if (newData.nodes.length !== oldData.nodes.length || \n        newData.links.length !== oldData.links.length) {\n      hasChanges = true;\n    }\n    \n    // Check if any node properties changed\n    const oldNodesMap = new Map(oldData.nodes.map(n => [n.name, n]));\n    for (const newNode of newData.nodes) {\n      const oldNode = oldNodesMap.get(newNode.name);\n      if (!oldNode) {\n        // New node added\n        changedNodes.push(newNode.name);\n        hasChanges = true;\n      } else if (oldNode.role !== newNode.role || \n                 oldNode.location !== newNode.location || \n                 oldNode.website !== newNode.website) {\n        // Existing node modified\n        changedNodes.push(newNode.name);\n        hasChanges = true;\n      }\n    }\n    \n    // Check if any links changed\n    const oldLinksSet = new Set(oldData.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }));\n    \n    for (const newLink of newData.links) {\n      const source = typeof newLink.source === 'object' ? newLink.source.name : newLink.source;\n      const target = typeof newLink.target === 'object' ? newLink.target.name : newLink.target;\n      if (!oldLinksSet.has(`${source}:${target}`)) {\n        // New link added - focus on both source and target nodes\n        if (!changedNodes.includes(source)) changedNodes.push(source);\n        if (!changedNodes.includes(target)) changedNodes.push(target);\n        hasChanges = true;\n      }\n    }\n    \n    // Store changed nodes for focusing\n    if (hasChanges && changedNodes.length > 0) {\n      this.changedNodesFromPolling = changedNodes;\n    }\n    \n    return hasChanges;\n  };\n\n  // Start polling for changes\n  startPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    \n    this.setState({ isPolling: true });\n    this.pollingInterval = setInterval(() => {\n      // Only poll if the tab is active (to save resources)\n      if (!document.hidden) {\n        // Use default query for polling, but respect custom query state, mutation processing, and NFC operations\n        if (this.state.customQueryActive || this.state.processingMutation || this.isNFCOperation) {\n          return;\n        }\n        // Don't preserve latestNode during polling - let change detection determine focus\n        this.loadData(null, this.defaultQuery);\n      }\n    }, 5000); // Check every 5 seconds\n    \n    // Reset update count every 30 seconds to prevent permanent blocking\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n    }\n    this.updateCountResetInterval = setInterval(() => {\n      this.updateCount = 0;\n    }, 30000);\n  };\n\n  // Stop polling\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n      this.updateCountResetInterval = null;\n    }\n    this.setState({ isPolling: false });\n  };\n\n  // WebSocket methods for real-time updates (disabled for now)\n  connectWebSocket = () => {\n    // WebSocket is disabled - using polling instead\n    // Uncomment and configure when WebSocket server is available\n    /*\n    try {\n      this.websocket = new WebSocket('wss://your-websocket-server.com');\n      \n      this.websocket.onopen = () => {\n        this.setState({ wsConnected: true, useWebSocket: true });\n      };\n      \n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'graph_update') {\n          this.loadData(null, this.defaultQuery);\n        }\n      };\n      \n      this.websocket.onclose = () => {\n        this.setState({ wsConnected: false });\n        setTimeout(() => {\n          if (!this.state.isPolling) {\n            this.startPolling();\n          }\n        }, 5000);\n      };\n      \n      this.websocket.onerror = (error) => {\n        this.setState({ wsConnected: false });\n      };\n    } catch (error) {\n      this.startPolling();\n    }\n    */\n    \n    // Start polling directly since WebSocket is disabled\n    this.startPolling();\n  };\n\n  disconnectWebSocket = () => {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n    this.setState({ wsConnected: false, useWebSocket: false });\n  };\n\n  // Enhanced componentDidMount to start polling directly\n  componentDidMount() {\n    // Validate and clean the query state first\n    this.validateAndCleanQuery();\n    \n    // Run timestamp migration for existing data\n    migrateTimestamps(this.driver);\n    \n    this.loadData();\n    \n    // Start polling (WebSocket is disabled)\n    this.connectWebSocket();\n    \n    // Add visibility change listener to pause polling when tab is not active\n    this.handleVisibilityChange = () => {\n      // Tab visibility change handling\n    };\n    \n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n    \n    // Start idle detection\n    this.startIdleDetection();\n  }\n\n  componentWillUnmount() {\n    // Clean up both polling and WebSocket\n    this.stopPolling();\n    this.disconnectWebSocket();\n    \n    // Clear custom query timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n    \n    // Clear mutation reload timeout\n    if (this.mutationReloadTimeout) {\n      clearTimeout(this.mutationReloadTimeout);\n      this.mutationReloadTimeout = null;\n    }\n    \n    // Clear processing mutation state\n    this.setState({ processingMutation: false });\n    \n    // Clear polling focus timeout\n    if (this.pollingFocusTimeout) {\n      clearTimeout(this.pollingFocusTimeout);\n      this.pollingFocusTimeout = null;\n    }\n    \n    // Stop breathing animation\n    this.stopBreathingAnimation();\n    \n    // Stop idle detection\n    this.stopIdleDetection();\n    \n    // Remove visibility change listener\n    if (this.handleVisibilityChange) {\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    // Helper function to capitalize first letter of each word\n    const capitalizeWords = (str) => {\n      if (!str) return str;\n      return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    };\n\n    const capitalizedNewUser = capitalizeWords(newUser);\n    const capitalizedNfcUser = capitalizeWords(nfcUserName);\n\n    // Set NFC operation flag to prevent double reload\n    this.isNFCOperation = true;\n\n    // Clear any existing pending NFC node to prevent conflicts\n    if (this.pendingNFCNode) {\n      this.pendingNFCNode = null;\n    }\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      // Create a single timestamp for the entire operation\n      const timestamp = Date.now();\n      \n      // First, check if a node with the same name as the new user already exists\n      const checkExistingUser = await session.run(\n        `MATCH (u:User {name: $user}) RETURN u.name as name`,\n        { user: capitalizedNewUser }\n      );\n\n      let nodeToFocus = capitalizedNewUser;\n      let isExistingNode = false;\n\n      if (checkExistingUser.records.length > 0) {\n        // Node with this name already exists, use the existing node\n        console.log(`Node with name \"${capitalizedNewUser}\" already exists, using existing node`);\n        isExistingNode = true;\n        nodeToFocus = capitalizedNewUser;\n      } else {\n        // Node doesn't exist, create a new one\n        console.log(`Creating new node with name \"${capitalizedNewUser}\"`);\n      }\n\n      // Only run duplicate cleanup for new nodes, not for existing nodes being merged\n      if (!this.isNFCOperation || !this.pendingNFCNode) {\n        // First, check if there are multiple nodes with the same name and merge them\n        const duplicateCheck = await session.run(\n          `MATCH (u:User {name: $user})\n           RETURN count(u) as count`,\n          { user: capitalizedNewUser }\n        );\n        \n        const duplicateCount = duplicateCheck.records[0].get('count').toNumber();\n        \n        if (duplicateCount > 1) {\n          console.log(`Found ${duplicateCount} duplicate nodes for \"${capitalizedNewUser}\", merging them...`);\n          \n          // Get all nodes with this name and their properties\n          const allNodes = await session.run(\n            `MATCH (u:User {name: $user})\n             RETURN u.role as role, u.location as location, u.website as website\n             ORDER BY u.role DESC, u.location DESC, u.website DESC`,\n            { user: capitalizedNewUser }\n          );\n          \n          // Find the best properties (non-empty values)\n          let bestRole = '';\n          let bestLocation = '';\n          let bestWebsite = '';\n          \n          allNodes.records.forEach(record => {\n            const role = record.get('role');\n            const location = record.get('location');\n            const website = record.get('website');\n            \n            if (role && role !== '') bestRole = role;\n            if (location && location !== '') bestLocation = location;\n            if (website && website !== '') bestWebsite = website;\n          });\n          \n          // Delete all nodes with this name and recreate with best properties\n          await session.run(\n            `MATCH (u:User {name: $user})\n             DETACH DELETE u`,\n            { user: capitalizedNewUser }\n          );\n          \n          // Create a single node with the best properties\n          await session.run(\n            `CREATE (u:User {name: $user, role: $role, location: $location, website: $website, createdAt: $createdAt})`,\n            { \n              user: capitalizedNewUser,\n              role: bestRole,\n              location: bestLocation,\n              website: bestWebsite,\n              createdAt: timestamp\n            }\n          );\n          \n          console.log(`Merged duplicate nodes for \"${capitalizedNewUser}\" with properties:`, { bestRole, bestLocation, bestWebsite, timestamp });\n        }\n      }\n\n      // Create or connect the nodes\n      // Use the same timestamp for consistency across all operations\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = '', \n                       u.location = '', \n                       u.website = '',\n                       u.createdAt = $timestamp\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = '', \n                       nfc.location = '', \n                       nfc.website = '',\n                       nfc.createdAt = $timestamp\n\n         MERGE (u)-[r:CONNECTED_TO]->(nfc) \n         ON CREATE SET r.createdAt = $timestamp\n        `,\n        { \n          user: capitalizedNewUser, \n          nfcUser: capitalizedNfcUser,\n          timestamp: timestamp\n        }\n        );\n      \n      console.log(`Created/connected nodes with timestamp: ${timestamp} for ${capitalizedNewUser} -> ${capitalizedNfcUser}`);\n      \n      // Store the node name for focusing after mutation completes\n      this.pendingNFCNode = nodeToFocus;\n      \n      // Trigger a single loadData call to reload the graph with the node\n      await this.loadData(nodeToFocus, this.defaultQuery);\n      \n      // Wait for the state to be updated, then focus and auto-popup form\n      let checkCount = 0;\n      const waitForStateUpdate = () => {\n        const nodeExists = this.state.data.nodes.find(n => n.name === nodeToFocus);\n        checkCount++;\n        \n        if (nodeExists) {\n          this.focusOnNewNode(nodeToFocus, this.state.data);\n          this.pendingNFCNode = null;\n          this.isNFCOperation = false;\n          \n          // Refresh timeline stats if in timeline mode\n          this.refreshTimelineStats();\n          \n          // Auto-popup the form for the NFC node (whether new or existing)\n          this.setState({ \n            nfcNodeForAutoPopup: nodeToFocus \n          });\n        } else if (checkCount < 10) { // Limit retries to prevent infinite loops\n          setTimeout(waitForStateUpdate, 500);\n        } else {\n          console.error(\"Failed to find node in state after multiple attempts\");\n          this.pendingNFCNode = null;\n          this.isNFCOperation = false;\n        }\n      };\n      \n      // Start checking for state update after a short delay\n      setTimeout(waitForStateUpdate, 1000);\n      \n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n      this.pendingNFCNode = null;\n      this.isNFCOperation = false;\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    // Only update the query state if it's a valid Cypher query or empty\n    const newQuery = event.target.value;\n    \n    // Allow empty queries (for clearing)\n    if (!newQuery || newQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = newQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (isValidQuery) {\n      this.setState({ query: newQuery });\n    }\n  };\n\n  // Method to reset query to default\n  resetQuery = () => {\n    this.setState({ \n      query: this.defaultQuery,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false\n    });\n    \n    // Clear any existing timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n  };\n\n  // Method to validate and clean the current query state\n  validateAndCleanQuery = () => {\n    const currentQuery = this.state.query;\n    \n    // Check if current query is valid\n    if (!currentQuery || typeof currentQuery !== 'string' || currentQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = currentQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      this.setState({ query: this.defaultQuery });\n    }\n  };\n\n  // Callback to clear NFC popup trigger\n  onNfcPopupTriggered = () => {\n    this.setState({ nfcNodeForAutoPopup: null });\n  };\n\n  // Timeline methods\n  toggleTimelineMode = async () => {\n    if (!this.state.timelineMode) {\n      // Entering timeline mode - get timeline stats\n      const stats = await this.getTimelineStats();\n      \n      // Ensure we have valid stats\n      const validStats = stats || {\n        earliest: new Date(Date.now() - 86400000), // 24 hours ago\n        latest: new Date()\n      };\n      \n      this.setState(prevState => ({\n        timelineMode: true,\n        timelineDate: validStats.latest,\n        timelineData: prevState.data,\n        timelineStats: validStats\n      }));\n    } else {\n      // Exiting timeline mode\n      this.setState({\n        timelineMode: false,\n        timelineDate: null,\n        timelineData: null,\n        timelineStats: null\n      });\n    }\n  };\n\n  loadTimelineData = async (date) => {\n    if (!this.driver) return;\n\n    const session = this.driver.session();\n    try {\n      const timestamp = date.getTime();\n      \n\n      \n      // Query for nodes and relationships that existed at the given timestamp\n      const result = await session.run(\n        `MATCH (u:User)\n         WHERE u.createdAt IS NOT NULL AND u.createdAt <= $timestamp\n         OPTIONAL MATCH (u)-[r:CONNECTED_TO]->(v:User)\n         WHERE v.createdAt IS NOT NULL AND v.createdAt <= $timestamp\n         AND r.createdAt IS NOT NULL AND r.createdAt <= $timestamp\n         RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite,\n                v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n        { timestamp }\n      );\n\n      const nodes = new Set();\n      const links = [];\n\n      result.records.forEach(record => {\n        const source = record.get('source');\n        const target = record.get('target');\n        const sourceRole = record.get('sourceRole');\n        const targetRole = record.get('targetRole');\n        const sourceLocation = record.get('sourceLocation');\n        const targetLocation = record.get('targetLocation');\n        const sourceWebsite = record.get('sourceWebsite');\n        const targetWebsite = record.get('targetWebsite');\n\n        // Always add the source node\n        nodes.add(source);\n        \n        // Add target node and link only if there's a relationship\n        if (target) {\n          nodes.add(target);\n          links.push({\n            source,\n            target,\n            sourceRole,\n            targetRole,\n            sourceLocation,\n            targetLocation,\n            sourceWebsite,\n            targetWebsite\n          });\n        }\n      });\n\n      const timelineData = {\n        nodes: Array.from(nodes).map(name => ({ name })),\n        links\n      };\n\n\n\n      this.setState({\n        timelineData,\n        timelineDate: date\n      });\n\n    } catch (error) {\n      console.error('Error loading timeline data:', error);\n    } finally {\n      session.close();\n    }\n  };\n\n  updateTimelineDate = (date) => {\n    this.loadTimelineData(date);\n  };\n\n  getTimelineStats = async () => {\n    if (!this.driver) return null;\n\n    const session = this.driver.session();\n    try {\n      // Get the earliest and latest timestamps, prioritizing relationships for start time\n      const result = await session.run(\n        `MATCH ()-[r:CONNECTED_TO]->()\n         WHERE r.createdAt IS NOT NULL\n         RETURN min(r.createdAt) as earliest, max(r.createdAt) as latest`\n      );\n\n      if (result.records.length > 0) {\n        const record = result.records[0];\n        const earliest = record.get('earliest');\n        const latest = record.get('latest');\n        \n\n        \n        // Helper function to validate and convert timestamp\n        const convertTimestamp = (timestamp) => {\n          if (!timestamp) return null;\n          \n          // Convert to number if it's a string\n          let numTimestamp = Number(timestamp);\n          \n          // Check if it's a valid timestamp (between 1970 and 2100)\n          const minValid = new Date('1970-01-01').getTime();\n          const maxValid = new Date('2100-01-01').getTime();\n          \n          // Try as milliseconds first\n          if (numTimestamp >= minValid && numTimestamp <= maxValid) {\n            return new Date(numTimestamp);\n          }\n          \n          // Try as seconds (multiply by 1000)\n          const secondsTimestamp = numTimestamp * 1000;\n          if (secondsTimestamp >= minValid && secondsTimestamp <= maxValid) {\n            return new Date(secondsTimestamp);\n          }\n          \n          // If it's not a valid timestamp, return null\n          return null;\n        };\n        \n        const earliestDate = convertTimestamp(earliest);\n        const latestDate = convertTimestamp(latest);\n        \n        const stats = {\n          earliest: earliestDate || new Date(Date.now() - 86400000), // Default to 24 hours ago\n          latest: latestDate || new Date()\n        };\n        \n        return stats;\n      }\n    } catch (error) {\n      console.error('Error getting timeline stats:', error);\n    } finally {\n      session.close();\n    }\n    return null;\n  };\n\n  resetToCurrentTime = () => {\n    this.setState({\n      timelineMode: false,\n      timelineDate: null,\n      timelineData: null\n    });\n  };\n\n  // Refresh timeline stats when new nodes are added\n  refreshTimelineStats = async () => {\n    if (this.state.timelineMode) {\n      const stats = await this.getTimelineStats();\n      \n      // Ensure timeline date stays within valid range\n      let newTimelineDate = this.state.timelineDate;\n      if (stats && this.state.timelineDate) {\n        if (this.state.timelineDate.getTime() > stats.latest.getTime()) {\n          newTimelineDate = stats.latest;\n        } else if (this.state.timelineDate.getTime() < stats.earliest.getTime()) {\n          newTimelineDate = stats.earliest;\n        }\n      }\n      \n      this.setState({ \n        timelineStats: stats,\n        timelineDate: newTimelineDate\n      });\n      \n      // Reload timeline data if date changed\n      if (newTimelineDate && newTimelineDate.getTime() !== this.state.timelineDate?.getTime()) {\n        this.loadTimelineData(newTimelineDate);\n      }\n    }\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n        pollingFocusNode={this.state.pollingFocusNode}\n    driver={this.driver} // Pass the driver\n        processingMutation={this.state.processingMutation}\n        updateUserActivity={this.updateUserActivity}\n        isUserActive={this.state.isUserActive}\n        scaleTransitionStart={this.scaleTransitionStart}\n        scaleTransitionDuration={this.scaleTransitionDuration}\n        nfcNodeForAutoPopup={this.state.nfcNodeForAutoPopup}\n        onNfcPopupTriggered={this.onNfcPopupTriggered}\n        timelineMode={this.state.timelineMode}\n        timelineDate={this.state.timelineDate}\n        timelineData={this.state.timelineData}\n        timelineStats={this.state.timelineStats}\n        toggleTimelineMode={this.toggleTimelineMode}\n        loadTimelineData={this.loadTimelineData}\n        updateTimelineDate={this.updateTimelineDate}\n        resetToCurrentTime={this.resetToCurrentTime}\n    />\n  } />\n  </Routes>\n  \n\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      // Generate a unique identifier for the person tapping the NFC tag\n      // This could be based on device info, session, or a random ID\n      const newUser = `User-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      console.log(`NFC Trigger: Starting NFC operation for ${username} with visitor ${newUser}`);\n\n      try {\n        await addNode(newUser, username); // newUser = visitor, username = NFC tag owner\n        console.log(`NFC Trigger: addNode completed successfully`);\n        } catch (error) {\n          console.error(\"NFC Trigger: Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/GreifNet/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Adding you to {username}'s network...</div>\n      };\n\n              const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, pollingFocusNode, driver, processingMutation, updateUserActivity, isUserActive, scaleTransitionStart, scaleTransitionDuration, nfcNodeForAutoPopup, onNfcPopupTriggered, timelineMode, timelineDate, timelineData, timelineStats, toggleTimelineMode, loadTimelineData, updateTimelineDate, resetToCurrentTime }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\n        const [analyticalAnswer, setAnalyticalAnswer] = useState(null); // For displaying analytical answers\n        const [showAnalyticalModal, setShowAnalyticalModal] = useState(false); // For showing/hiding the answer modal\n        const [relationshipNote, setRelationshipNote] = useState(\"\"); // For relationship notes when connecting to existing nodes\n        const [nfcNameInput, setNfcNameInput] = useState(\"\");\n        const [nfcRoleInput, setNfcRoleInput] = useState(\"\"); // For initial NFC name input\n        const [showNfcNamePopup, setShowNfcNamePopup] = useState(false); // For showing NFC name input popup\n        const [showProfilePopup, setShowProfilePopup] = useState(false); // For showing profile completion popup\n        const [pendingNfcName, setPendingNfcName] = useState(\"\"); // Store the name that was entered\n        const [selectedLink, setSelectedLink] = useState(null); // For selected relationship/link\n        const [relationshipData, setRelationshipData] = useState({}); // Store relationship data\n        const [showNfcRelationshipPopup, setShowNfcRelationshipPopup] = useState(false);\n        const [currentNfcConnection, setCurrentNfcConnection] = useState(null); // For NFC relationship note popup\n        const [hoveredLink, setHoveredLink] = useState(null); // For link hover effects\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Auto-popup form for NFC nodes\n        useEffect(() => {\n          if (nfcNodeForAutoPopup && data.nodes.length > 0) {\n            // Find the NFC node in the data\n            const nfcNode = data.nodes.find(node => node.name === nfcNodeForAutoPopup);\n            if (nfcNode) {\n              // Show the initial name input popup for NFC nodes\n              setShowNfcNamePopup(true);\n              setNfcNameInput(\"\");\n              setFocusNode(nfcNode.name);\n              setClickedNode(nfcNode.name);\n              setLastAction('latestNode');\n              \n              // Clear the nfcNodeForAutoPopup after triggering the popup\n              if (typeof onNfcPopupTriggered === 'function') {\n                onNfcPopupTriggered();\n              }\n            }\n          }\n        }, [nfcNodeForAutoPopup, data.nodes]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode :\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.website && node.website.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        // Always include mutated nodes in visibility if there was a mutation\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n          mutatedNodes.forEach(nodeName => {\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.website && node.website.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         lastAction === 'mutation' ?\n                         (() => {\n                           const mutationNodes = new Set();\n                           mutatedNodes.forEach(nodeName => {\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\n                           });\n                           return mutationNodes;\n                         })() :\n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n            // For mutation queries, zoom to the mutated nodes\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for mutation\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          \n          // Update user activity when typing\n          updateUserActivity();\n          \n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            // Detection for different types of requests\n            const question = inputValue.toLowerCase();\n            \n            // Report request detection\n            const isReportRequest = (() => {\n              const reportKeywords = [\n                'report', 'analysis', 'summary', 'network analysis', 'bridge analysis', \n                'top connectors', 'network health', 'generate report', 'comprehensive report', \n                'full analysis', 'network report', 'bridge report', 'connector analysis'\n              ];\n              return reportKeywords.some(keyword => question.includes(keyword));\n            })();\n\n            // More specific detection for true analytical questions vs visualization requests\n            const isTrueAnalyticalQuestion = (() => {\n              const analyticalKeywords = ['how many', 'how much', 'what is', 'what are', 'when', 'where', 'why', 'who', 'which', 'how', 'what'];\n              \n              // True analytical questions that ask for specific data points\n              const analyticalPatterns = [\n                /how many/i,\n                /how much/i,\n                /what is the (count|number|total)/i,\n                /what are the (count|numbers|totals)/i,\n                /count of/i,\n                /total number of/i,\n                /how many (artists|users|people|connections|relationships)/i,\n                /what (roles|locations|websites) (exist|are there)/i,\n                /which (roles|locations|websites)/i,\n                /what is the most common/i,\n                /what is the average/i,\n                /how many people are (in|from)/i\n              ];\n              \n              // Visualization requests that should NOT be treated as analytical\n              const visualizationPatterns = [\n                /show me/i,\n                /display/i,\n                /visualize/i,\n                /find/i,\n                /search for/i,\n                /look for/i,\n                /get/i,\n                /bring up/i,\n                /open/i\n              ];\n              \n              // If it matches visualization patterns, it's NOT analytical\n              if (visualizationPatterns.some(pattern => pattern.test(question))) {\n                return false;\n              }\n              \n              // If it matches analytical patterns, it IS analytical\n              if (analyticalPatterns.some(pattern => pattern.test(question))) {\n                return true;\n              }\n              \n              // Default: if it contains analytical keywords but doesn't match visualization patterns\n              return analyticalKeywords.some(keyword => question.includes(keyword));\n            })();\n\n            if (isReportRequest) {\n              // For report requests, execute the query and generate a comprehensive report\n              try {\n                const session = driver.session({ database: \"neo4j\" });\n                const result = await session.run(generatedQuery);\n                await session.close();\n\n                // Generate a comprehensive network analysis report\n                const report = generateNetworkReport(result, inputValue);\n                \n                // Display the report in a modal or notification\n                displayNetworkReport(report, inputValue);\n                \n                // Clear the input after showing the report\n                setTimeout(() => {\n                  setInputValue(\"\");\n                }, 10000); // Keep report visible longer\n                \n              } catch (queryError) {\n                console.error(\"Error generating report:\", queryError);\n                displayNetworkReport(\"Sorry, I couldn't generate the report. Please try again.\", inputValue);\n              }\n            } else if (isTrueAnalyticalQuestion) {\n              // For analytical questions, execute the query and provide a text answer\n              try {\n                const session = driver.session({ database: \"neo4j\" });\n                const result = await session.run(generatedQuery);\n                await session.close();\n\n                // Generate a human-readable answer based on the query results\n                const answer = generateAnalyticalAnswer(inputValue, result, generatedQuery);\n                \n                // Display the answer in a modal or notification\n                displayAnalyticalAnswer(answer, inputValue);\n                \n                // Clear the input after showing the answer\n                setTimeout(() => {\n                  setInputValue(\"\");\n                }, 5000); // Keep answer visible longer for analytical questions\n                \n              } catch (queryError) {\n                console.error(\"Error executing analytical query:\", queryError);\n                displayAnalyticalAnswer(\"Sorry, I couldn't analyze that question. Please try rephrasing it.\", inputValue);\n              }\n            } else {\n              // For regular queries, proceed with the existing logic\n              setInputValue(generatedQuery);\n              handleChange({ target: { value: generatedQuery } });\n\n              await loadData(null, generatedQuery);\n\n              // Check if the generated query is a mutation query (updates the graph)\n              const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\n              \n              // If it's a mutation query, immediately return to default state\n              if (isMutationQuery) {\n                \n                // Extract node names from the mutation query to track what was created/modified\n                let extractedNodes = [];\n                \n                // Handle different mutation query patterns\n                if (generatedQuery.includes('DELETE')) {\n                  // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\n                  const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\n                  if (deleteMatches) {\n                    extractedNodes = deleteMatches.map(match => {\n                      const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                      return nameMatch ? nameMatch[1] : null;\n                    }).filter(Boolean);\n                  }\n                } else if (generatedQuery.includes('SET')) {\n                  // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\n                  const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\n                  if (matchClause) {\n                    extractedNodes = [matchClause[1]];\n                  }\n                } else {\n                  // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\n                  const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\n                  extractedNodes = nodeMatches ? \n                    nodeMatches.map(match => {\n                      const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                      return nameMatch ? nameMatch[1] : null;\n                    }).filter(Boolean) : [];\n                }\n                \n                setMutatedNodes(extractedNodes);\n                setLastAction('mutation');\n                \n                // Immediately return to default query without any delay\n                const defaultQuery = `\n                  MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n                  RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n                         v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\n                `;\n                await loadData(null, defaultQuery);\n              }\n              \n              // Clear the input after 3 seconds\n              setTimeout(() => {\n                setInputValue(\"\");\n              }, 3000);\n            }\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        // Helper function to check if a node is new (created via NFC)\n        const isNewNode = (node) => {\n          return node.name === latestNode;\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          \n          // Clear relationship note when clicking a different node\n          setRelationshipNote(\"\");\n          \n          // Update user activity when clicking nodes\n          updateUserActivity();\n          \n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleLinkClick = async (link) => {\n          if (!link) return;\n          \n          const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n          const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n          \n          console.log(`Link clicked: ${sourceName} -> ${targetName}`);\n          \n          const session = driver.session();\n          try {\n            // Get relationship data including notes\n            const relationshipResult = await session.run(\n              `MATCH (source:User {name: $sourceName})-[r:CONNECTED_TO]->(target:User {name: $targetName})\n               RETURN r.note as note, source.name as sourceName, target.name as targetName`,\n              { sourceName: sourceName, targetName: targetName }\n            );\n            \n            if (relationshipResult.records.length > 0) {\n              const record = relationshipResult.records[0];\n              const note = record.get('note');\n              \n              setSelectedLink(link);\n              setRelationshipData({\n                sourceName: sourceName,\n                targetName: targetName,\n                note: note\n              });\n              \n              console.log(`Relationship data: ${sourceName} -> ${targetName}, Note: ${note}`);\n            }\n          } catch (error) {\n            console.error(\"Error fetching relationship data:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const handleLinkHover = async (link) => {\n          if (!link) {\n            setHoveredLink(null);\n            return;\n          }\n          \n          const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n          const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n          \n          const session = driver.session();\n          try {\n            // Get relationship data including notes\n            const relationshipResult = await session.run(\n              `MATCH (source:User {name: $sourceName})-[r:CONNECTED_TO]->(target:User {name: $targetName})\n               RETURN r.note as note, source.name as sourceName, target.name as targetName`,\n              { sourceName: sourceName, targetName: targetName }\n            );\n            \n            if (relationshipResult.records.length > 0) {\n              const record = relationshipResult.records[0];\n              const note = record.get('note');\n              \n              setHoveredLink({\n                link: link,\n                sourceName: sourceName,\n                targetName: targetName,\n                note: note\n              });\n            }\n          } catch (error) {\n            console.error(\"Error fetching relationship data:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          const newName = capitalizeWords(editedNode.name);\n          const oldName = selectedNode.name;\n\n          // Don't do anything if the name hasn't changed\n          if (newName === oldName) {\n            setSelectedNode(null); // Close the panel\n            return;\n          }\n\n          const session = driver.session();\n          try {\n            // First, check if a node with the new name already exists\n            const existingNodeCheck = await session.run(\n              `MATCH (u:User {name: $newName}) RETURN u`,\n              { newName: newName }\n            );\n\n            if (existingNodeCheck.records.length > 0) {\n              // A node with the new name already exists - merge them\n              console.log(`Node with name \"${newName}\" already exists, merging with existing node...`);\n              \n              // Get the existing node's properties\n              const existingNode = existingNodeCheck.records[0].get('u').properties;\n              \n              // Merge properties: keep non-empty values from either node\n              const mergedRole = existingNode.role && existingNode.role !== '' ? existingNode.role : editedNode.role;\n              const mergedLocation = existingNode.location && existingNode.location !== '' ? existingNode.location : editedNode.location;\n              const mergedWebsite = existingNode.website && existingNode.website !== '' ? existingNode.website : editedNode.website;\n              \n              // Efficiently merge all relationships and delete old node in a single operation\n              await session.run(\n                `MATCH (old:User {name: $oldName})\n                 OPTIONAL MATCH (old)-[r1:CONNECTED_TO]->(other1)\n                 OPTIONAL MATCH (other2)-[r2:CONNECTED_TO]->(old)\n                 WITH old, collect(DISTINCT other1) as outgoing, collect(DISTINCT other2) as incoming\n                 MATCH (existing:User {name: $newName})\n                 \n                 // Create outgoing relationships (avoiding self-connections and duplicates)\n                 FOREACH (other IN outgoing |\n                   FOREACH (x IN CASE WHEN other.name <> $newName AND NOT EXISTS((existing)-[:CONNECTED_TO]->(other)) THEN [1] ELSE [] END |\n                     CREATE (existing)-[r:CONNECTED_TO]->(other)\n                     SET r.createdAt = $timestamp\n                   )\n                 )\n                 \n                 // Create incoming relationships (avoiding self-connections and duplicates)\n                 FOREACH (other IN incoming |\n                   FOREACH (x IN CASE WHEN other.name <> $newName AND NOT EXISTS((other)-[:CONNECTED_TO]->(existing)) THEN [1] ELSE [] END |\n                     CREATE (other)-[r:CONNECTED_TO]->(existing)\n                     SET r.createdAt = $timestamp\n                   )\n                 )\n                 \n                 // Delete the old node\n                 DETACH DELETE old`,\n                { oldName: oldName, newName: newName, timestamp: Date.now() }\n              );\n              \n              // Update the existing node with merged properties\n              await session.run(\n                `MATCH (u:User {name: $newName})\n                 SET u.role = $role, u.location = $location, u.website = $website`,\n                {\n                  newName: newName,\n                  role: mergedRole,\n                  location: mergedLocation,\n                  website: mergedWebsite\n                }\n              );\n              \n              console.log(`Successfully merged nodes. New node \"${newName}\" has properties:`, { mergedRole, mergedLocation, mergedWebsite });\n              \n              // Focus on the merged node\n              await loadData(newName);\n              setSelectedNode(null); // Close the panel\n            } else {\n              // No existing node with the new name, just update the current node\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName`,\n                {\n                  oldName: oldName,\n                  newName: newName,\n                }\n              );\n              await loadData(newName); // Keep the edited node as latestNode\n              setSelectedNode(null); // Close the panel\n            }\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const saveNewNodeProfile = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: capitalizeWords(editedNode.name),\n                role: editedNode.role || '',\n                location: editedNode.location || '',\n                website: editedNode.website || ''\n              }\n            );\n            await loadData(capitalizeWords(editedNode.name));\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating new node profile:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const saveRelationshipNote = async () => {\n          if (!selectedNode || !relationshipNote.trim()) return;\n\n          const session = driver.session();\n          try {\n            let sourceName, targetName;\n            \n            if (showNfcRelationshipPopup) {\n              // This is an NFC operation - use the tracked connection\n              if (currentNfcConnection) {\n                sourceName = currentNfcConnection.source;\n                targetName = currentNfcConnection.target;\n              } else {\n                // Fallback: try to find the connection\n                const fallbackResult = await session.run(\n                  `MATCH (source:User)-[r:CONNECTED_TO]->(target:User {name: $holderName})\n                   RETURN source.name as sourceName, target.name as targetName\n                   ORDER BY source.name DESC\n                   LIMIT 1`,\n                  { holderName: selectedNode.name }\n                );\n                \n                if (fallbackResult.records.length > 0) {\n                  const record = fallbackResult.records[0];\n                  sourceName = record.get('sourceName');\n                  targetName = record.get('targetName');\n                }\n              }\n            } else {\n              // This is a regular relationship note - use the existing logic\n              const nfcHolderResult = await session.run(\n                `MATCH (existing:User {name: $existingName})-[r:CONNECTED_TO]->(holder:User)\n                 RETURN holder.name as holderName`,\n                { existingName: selectedNode.name }\n              );\n              \n              const nfcHolderName = nfcHolderResult.records[0]?.get('holderName');\n              \n              if (nfcHolderName) {\n                sourceName = selectedNode.name;\n                targetName = nfcHolderName;\n              }\n            }\n            \n            if (sourceName && targetName) {\n              // Add the relationship note as a property to the connection\n              const updateResult = await session.run(\n                `MATCH (source:User {name: $sourceName})-[r:CONNECTED_TO]->(target:User {name: $targetName})\n                 SET r.note = $note\n                 RETURN r.note as updatedNote`,\n                {\n                  sourceName: sourceName,\n                  targetName: targetName,\n                  note: relationshipNote.trim()\n                }\n              );\n              \n              if (updateResult.records.length > 0) {\n                const updatedNote = updateResult.records[0].get('updatedNote');\n              }\n            }\n            \n            setSelectedNode(null); // Close the panel\n            setRelationshipNote(\"\"); // Clear the note\n            setPendingNfcName(\"\"); // Clear pending name\n            setShowNfcRelationshipPopup(false); // Close NFC relationship popup\n            setCurrentNfcConnection(null); // Clear the tracked connection\n          } catch (error) {\n            console.error(\"Error saving relationship note:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const handleNfcNameSubmit = async () => {\n          if (!nfcNameInput.trim()) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          const capitalizedName = capitalizeWords(nfcNameInput.trim());\n          setPendingNfcName(capitalizedName);\n\n          const session = driver.session();\n          try {\n            // Check if a node with this name already exists\n            const existingNodeCheck = await session.run(\n              `MATCH (u:User {name: $name}) RETURN u`,\n              { name: capitalizedName }\n            );\n\n            if (existingNodeCheck.records.length > 0) {\n              // Node exists - merge visitor into existing node and show connection note popup\n              console.log(`Node \"${capitalizedName}\" exists, merging visitor into existing node`);\n              \n              const existingNode = existingNodeCheck.records[0].get('u').properties;\n              \n              // Get the NFC holder name from the visitor's connection\n              const nfcHolderResult = await session.run(\n                `MATCH (visitor:User {name: $visitorName})-[r:CONNECTED_TO]->(holder:User)\n                 RETURN holder.name as holderName`,\n                { visitorName: latestNode }\n              );\n              \n              const nfcHolderName = nfcHolderResult.records[0]?.get('holderName');\n              \n              if (nfcHolderName) {\n                // Store the connection details for the relationship note\n                setCurrentNfcConnection({\n                  source: capitalizedName,\n                  target: nfcHolderName\n                });\n                \n                // Check if the existing node is already connected to the NFC holder\n                const existingConnectionCheck = await session.run(\n                  `MATCH (existing:User {name: $existingName})-[r:CONNECTED_TO]->(holder:User {name: $holderName})\n                   RETURN r`,\n                  { existingName: capitalizedName, holderName: nfcHolderName }\n                );\n                \n                if (existingConnectionCheck.records.length === 0) {\n                  // No existing connection, create one\n                  await session.run(\n                    `MATCH (existing:User {name: $existingName}), (holder:User {name: $holderName})\n                     CREATE (existing)-[r:CONNECTED_TO]->(holder)\n                     SET r.createdAt = $timestamp`,\n                    { existingName: capitalizedName, holderName: nfcHolderName, timestamp: Date.now() }\n                  );\n                  console.log(`Created new connection from \"${capitalizedName}\" to \"${nfcHolderName}\"`);\n                } else {\n                  console.log(`Connection from \"${capitalizedName}\" to \"${nfcHolderName}\" already exists`);\n                }\n                \n                // Delete the visitor node\n                await session.run(\n                  `MATCH (visitor:User {name: $visitorName})\n                   DETACH DELETE visitor`,\n                  { visitorName: latestNode }\n                );\n                \n                console.log(`Merged visitor into existing node \"${capitalizedName}\"`);\n              }\n              \n              setShowNfcNamePopup(false);\n              setNfcNameInput(\"\");\n              setNfcRoleInput(\"\");\n              setSelectedNode(existingNode);\n              setRelationshipNote(\"\");\n              setShowNfcRelationshipPopup(true); // Show NFC relationship note popup\n              \n              // Don't reload data to avoid triggering duplicate cleanup again\n              // Just focus on the existing node\n              console.log(`Merged visitor into existing node \"${capitalizedName}\", focusing on existing node`);\n              \n              // Update the latestNode to the existing node so it gets focused\n              // We'll let the user manually refresh if needed\n            } else {\n              // Node doesn't exist - show profile completion popup\n              console.log(`Node \"${capitalizedName}\" doesn't exist, showing profile completion popup`);\n              setShowNfcNamePopup(false);\n              setNfcNameInput(\"\");\n              setNfcRoleInput(\"\");\n              setShowProfilePopup(true);\n              setSelectedNode({ name: capitalizedName, role: nfcRoleInput, location: \"\", website: \"\" });\n              setEditedNode({ name: capitalizedName, role: nfcRoleInput, location: \"\", website: \"\" });\n            }\n          } catch (error) {\n            console.error(\"Error checking for existing node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const saveNewProfileFromNfc = async () => {\n          if (!editedNode || !pendingNfcName) return;\n\n          const session = driver.session();\n          try {\n            // Update the visitor node with the new name and profile information\n            await session.run(\n              `MATCH (visitor:User {name: $visitorName}) \n               SET visitor.name = $newName, visitor.role = $role, visitor.location = $location, visitor.website = $website`,\n              {\n                visitorName: latestNode,\n                newName: editedNode.name,\n                role: editedNode.role || '',\n                location: editedNode.location || '',\n                website: editedNode.website || ''\n              }\n            );\n            \n            console.log(`Updated visitor profile: ${editedNode.name} with role: ${editedNode.role}, location: ${editedNode.location}, website: ${editedNode.website}`);\n            setShowProfilePopup(false);\n            \n            // Get the NFC holder name from the visitor's connection\n            const nfcHolderResult = await session.run(\n              `MATCH (visitor:User {name: $visitorName})-[r:CONNECTED_TO]->(holder:User)\n               RETURN holder.name as holderName`,\n              { visitorName: editedNode.name }\n            );\n            \n            const nfcHolderName = nfcHolderResult.records[0]?.get('holderName');\n            \n            if (nfcHolderName) {\n              // Store the connection details for the relationship note\n              setCurrentNfcConnection({\n                source: editedNode.name,\n                target: nfcHolderName\n              });\n              \n              // Show connection note popup for the new user\n              setSelectedNode({ name: nfcHolderName, role: \"\", location: \"\", website: \"\" });\n              setRelationshipNote(\"\");\n              setShowNfcRelationshipPopup(true);\n            } else {\n              // No NFC holder found, just close the popup\n              setSelectedNode(null);\n              setEditedNode(null);\n              setPendingNfcName(\"\");\n              setCurrentNfcConnection(null);\n            }\n            \n            // Reload data to show the updated node\n            await loadData(editedNode.name);\n          } catch (error) {\n            console.error(\"Error saving new profile from NFC:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        // Helper function to generate human-readable answers from query results\n        const generateAnalyticalAnswer = (question, result, query) => {\n          const questionLower = question.toLowerCase();\n          const records = result.records;\n          \n          // Debug logging to see what's happening\n          console.log(\"Analytical question:\", question);\n          console.log(\"Generated query:\", query);\n          console.log(\"Query result:\", result);\n          console.log(\"Records:\", records);\n          \n          if (records.length === 0) {\n            return \"I couldn't find any data matching your question.\";\n          }\n\n          // Handle count queries\n          if (questionLower.includes('how many') || questionLower.includes('count')) {\n            const count = records[0].get(0);\n            \n            // Debug: Log the actual query and result for count queries\n            console.log(\"Count query result:\", count);\n            console.log(\"Question was:\", question);\n            \n            if (questionLower.includes('artist')) {\n              return `There are ${count} artists.`;\n            } else if (questionLower.includes('user')) {\n              return `There are ${count} users.`;\n            } else if (questionLower.includes('connection') || questionLower.includes('relationship')) {\n              return `There are ${count} connections.`;\n            } else if (questionLower.includes('craftsman')) {\n              return `There are ${count} craftsmen.`;\n            } else if (questionLower.includes('entrepreneur')) {\n              return `There are ${count} entrepreneurs.`;\n            } else if (questionLower.includes('educational institution') || questionLower.includes('institution')) {\n              return `There are ${count} educational institutions.`;\n            } else if (questionLower.includes('holder')) {\n              return `There are ${count} holder.`;\n            } else if (questionLower.includes('program')) {\n              return `There are ${count} program.`;\n            } else {\n              return `The count is ${count}.`;\n            }\n          }\n\n          // Handle location-based queries\n          if (questionLower.includes('where') || questionLower.includes('location')) {\n            let locations = [];\n            \n            // Try different case variations for location field\n            if (records[0].keys && records[0].keys.includes('location')) {\n              locations = records.map(record => record.get('location')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Location')) {\n              locations = records.map(record => record.get('Location')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_location')) {\n              locations = records.map(record => record.get('u_location')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Location')) {\n              locations = records.map(record => record.get('u_Location')).filter(Boolean);\n            } else {\n              locations = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            const uniqueLocations = [...new Set(locations)];\n            if (uniqueLocations.length === 1) {\n              return `The location is ${uniqueLocations[0]}.`;\n            } else {\n              return `The locations found are: ${uniqueLocations.join(', ')}.`;\n            }\n          }\n\n          // Handle role-based queries\n          if (questionLower.includes('role') || questionLower.includes('what do')) {\n            let roles = [];\n            \n            // Try different case variations for role field\n            if (records[0].keys && records[0].keys.includes('role')) {\n              roles = records.map(record => record.get('role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Role')) {\n              roles = records.map(record => record.get('Role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_role')) {\n              roles = records.map(record => record.get('u_role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Role')) {\n              roles = records.map(record => record.get('u_Role')).filter(Boolean);\n            } else {\n              roles = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            const uniqueRoles = [...new Set(roles)];\n            if (uniqueRoles.length === 1) {\n              return `The role is ${uniqueRoles[0]}.`;\n            } else {\n              return `The roles found are: ${uniqueRoles.join(', ')}.`;\n            }\n          }\n\n          // Handle name-based queries\n          if (questionLower.includes('who') || questionLower.includes('name')) {\n            let names = [];\n            \n            // Try different case variations for name field\n            if (records[0].keys && records[0].keys.includes('name')) {\n              names = records.map(record => record.get('name')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Name')) {\n              names = records.map(record => record.get('Name')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_name')) {\n              names = records.map(record => record.get('u_name')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Name')) {\n              names = records.map(record => record.get('u_Name')).filter(Boolean);\n            } else {\n              names = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            if (names.length === 1) {\n              return `The person is ${names[0]}.`;\n            } else if (names.length <= 5) {\n              return `The people are: ${names.join(', ')}.`;\n            } else {\n              return `Found ${names.length} people: ${names.slice(0, 3).join(', ')} and ${names.length - 3} more.`;\n            }\n          }\n\n          // Handle \"what roles exist\" specifically\n          if (questionLower.includes('what roles exist') || questionLower.includes('what roles are there')) {\n            // Try to extract roles from different possible result formats\n            let roles = [];\n            \n            // Check if the query returned role data - try different case variations\n            if (records[0].keys && records[0].keys.includes('role')) {\n              roles = records.map(record => record.get('role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Role')) {\n              roles = records.map(record => record.get('Role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_role')) {\n              roles = records.map(record => record.get('u_role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Role')) {\n              roles = records.map(record => record.get('u_Role')).filter(Boolean);\n            } else {\n              // Try to get the first column as roles\n              roles = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            const uniqueRoles = [...new Set(roles)];\n            if (uniqueRoles.length > 0) {\n              return `The roles found in the network are: ${uniqueRoles.join(', ')}.`;\n            } else {\n              return \"I couldn't find any role information in the network.\";\n            }\n          }\n\n          // Default response for other queries\n          const resultCount = records.length;\n          if (resultCount === 1) {\n            return \"I found 1 result matching your question.\";\n          } else {\n            return `I found ${resultCount} results matching your question.`;\n          }\n        };\n\n        // Helper function to display analytical answers\n        const displayAnalyticalAnswer = (answer, question) => {\n          setAnalyticalAnswer({ answer, question });\n          setShowAnalyticalModal(true);\n          \n          // Auto-hide after 8 seconds\n          setTimeout(() => {\n            setShowAnalyticalModal(false);\n            setAnalyticalAnswer(null);\n          }, 8000);\n        };\n\n        // Helper function to generate comprehensive network analysis reports\n        const generateNetworkReport = (result, question) => {\n          const records = result.records;\n          \n          if (records.length === 0) {\n            return \"No network data found to analyze.\";\n          }\n\n          // Parse the network data\n          const connections = [];\n          const users = new Map();\n          const userConnections = new Map();\n\n          records.forEach(record => {\n            const sourceName = record.get('sourceName');\n            const sourceRole = record.get('sourceRole');\n            const sourceLocation = record.get('sourceLocation');\n            const targetName = record.get('targetName');\n            const targetRole = record.get('targetRole');\n            const targetLocation = record.get('targetLocation');\n            const connectionNote = record.get('connectionNote');\n            const connectionTime = record.get('connectionTime');\n\n            // Add users to the map\n            if (sourceName) {\n              users.set(sourceName, {\n                name: sourceName,\n                role: sourceRole,\n                location: sourceLocation\n              });\n            }\n            if (targetName) {\n              users.set(targetName, {\n                name: targetName,\n                role: targetRole,\n                location: targetLocation\n              });\n            }\n\n            // Count connections per user\n            if (sourceName && targetName) {\n              userConnections.set(sourceName, (userConnections.get(sourceName) || 0) + 1);\n              userConnections.set(targetName, (userConnections.get(targetName) || 0) + 1);\n              \n              connections.push({\n                source: sourceName,\n                target: targetName,\n                note: connectionNote,\n                time: connectionTime\n              });\n            }\n          });\n\n          // Find top connectors\n          const topConnectors = Array.from(userConnections.entries())\n            .sort((a, b) => b[1] - a[1])\n            .slice(0, 10)\n            .map(([name, count]) => ({ name, count }));\n\n          // Analyze demographics\n          const locations = Array.from(users.values()).map(u => u.location).filter(Boolean);\n          const uniqueLocations = [...new Set(locations)];\n          const roles = Array.from(users.values()).map(u => u.role).filter(Boolean);\n          const uniqueRoles = [...new Set(roles)];\n\n          // Generate the report\n          const report = `# 📊 **Network Analysis Report**\n\n## **🎯 Executive Summary**\n- **Total Users**: ${users.size}\n- **Total Connections**: ${connections.length}\n- **Top Connector**: ${topConnectors[0]?.name || 'N/A'} (${topConnectors[0]?.count || 0} connections)\n- **Network Health**: ${connections.length > users.size * 2 ? 'Excellent' : connections.length > users.size ? 'Good' : 'Needs Improvement'}\n\n## **🏆 Top Network Connectors**\n${topConnectors.slice(0, 5).map((connector, index) => \n  `${index + 1}. **${connector.name}** - ${connector.count} connections`\n).join('\\n')}\n\n## **🌍 Demographics & Participation**\n- **Geographic Diversity**: ${uniqueLocations.length} unique locations\n- **Professional Diversity**: ${uniqueRoles.length} unique roles\n- **Participation Rate**: ${Math.round((connections.length / (users.size * (users.size - 1) / 2)) * 100)}% of possible connections\n\n## **📈 Network Statistics**\n| Metric | Value |\n|--------|-------|\n| **Total Users** | ${users.size} |\n| **Total Connections** | ${connections.length} |\n| **Average Connections per User** | ${Math.round(connections.length / users.size * 2)} |\n| **Unique Locations** | ${uniqueLocations.length} |\n| **Unique Roles** | ${uniqueRoles.length} |\n\n## **💡 Key Insights**\n- The network shows ${connections.length > users.size * 2 ? 'strong' : connections.length > users.size ? 'moderate' : 'limited'} connectivity\n- Top connectors demonstrate effective networking skills\n- Geographic and professional diversity enhance network value\n\n## **🎯 Recommendations**\n- Encourage more connections between different communities\n- Support bridge nodes to maintain network resilience\n- Foster cross-cultural and cross-professional connections`;\n\n          return report;\n        };\n\n        // Helper function to display network reports\n        const displayNetworkReport = (report, question) => {\n          // Format the report with better styling\n          const formattedReport = report\n            .replace(/# 📊 \\*\\*Network Analysis Report\\*\\*/g, '<h1 style=\"color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; margin-bottom: 20px;\">📊 Network Analysis Report</h1>')\n            .replace(/## \\*\\*🎯 Executive Summary\\*\\*/g, '<h2 style=\"color: #34495e; background: #ecf0f1; padding: 10px; border-radius: 5px; margin: 20px 0 15px 0;\">🎯 Executive Summary</h2>')\n            .replace(/## \\*\\*🏆 Top Network Connectors\\*\\*/g, '<h2 style=\"color: #34495e; background: #ecf0f1; padding: 10px; border-radius: 5px; margin: 20px 0 15px 0;\">🏆 Top Network Connectors</h2>')\n            .replace(/## \\*\\*🌍 Demographics & Participation\\*\\*/g, '<h2 style=\"color: #34495e; background: #ecf0f1; padding: 10px; border-radius: 5px; margin: 20px 0 15px 0;\">🌍 Demographics & Participation</h2>')\n            .replace(/## \\*\\*📈 Network Statistics\\*\\*/g, '<h2 style=\"color: #34495e; background: #ecf0f1; padding: 10px; border-radius: 5px; margin: 20px 0 15px 0;\">📈 Network Statistics</h2>')\n            .replace(/## \\*\\*💡 Key Insights\\*\\*/g, '<h2 style=\"color: #34495e; background: #ecf0f1; padding: 10px; border-radius: 5px; margin: 20px 0 15px 0;\">💡 Key Insights</h2>')\n            .replace(/## \\*\\*🎯 Recommendations\\*\\*/g, '<h2 style=\"color: #34495e; background: #ecf0f1; padding: 10px; border-radius: 5px; margin: 20px 0 15px 0;\">🎯 Recommendations</h2>')\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong style=\"color: #e74c3c;\">$1</strong>')\n            .replace(/- \\*\\*(.*?)\\*\\*: (.*?)$/gm, '<li style=\"margin: 8px 0; padding: 5px 0; border-left: 3px solid #3498db; padding-left: 15px;\"><strong style=\"color: #e74c3c;\">$1</strong>: $2</li>')\n            .replace(/(\\d+)\\. \\*\\*(.*?)\\*\\* - (\\d+) connections/g, '<li style=\"margin: 8px 0; padding: 8px; background: #f8f9fa; border-radius: 4px; border-left: 4px solid #27ae60;\"><strong style=\"color: #e74c3c;\">$2</strong> - <span style=\"color: #27ae60; font-weight: bold;\">$3 connections</span></li>')\n            .replace(/\\| (.*?) \\| (.*?) \\|/g, '<tr><td style=\"padding: 8px; border: 1px solid #ddd; background: #f8f9fa; font-weight: bold;\">$1</td><td style=\"padding: 8px; border: 1px solid #ddd; text-align: center;\">$2</td></tr>')\n            .replace(/\\|--------\\|-------\\|/g, '')\n            .replace(/- (.*?)$/gm, '<li style=\"margin: 5px 0; padding: 3px 0;\">$1</li>');\n\n          // Wrap in proper HTML structure\n          const htmlReport = `\n            <div style=\"\n              max-height: 70vh; \n              overflow-y: auto; \n              padding: 20px; \n              background: white; \n              border-radius: 8px; \n              box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              line-height: 1.6;\n              color: #2c3e50;\n            \">\n              <div style=\"margin-bottom: 20px;\">\n                ${formattedReport}\n              </div>\n            </div>\n          `;\n\n          setAnalyticalAnswer({ \n            answer: htmlReport, \n            question: \"Network Analysis Report\",\n            isHtml: true \n          });\n          setShowAnalyticalModal(true);\n          \n          // Auto-hide after 30 seconds for reports (longer since it's more detailed)\n          setTimeout(() => {\n            setShowAnalyticalModal(false);\n            setAnalyticalAnswer(null);\n          }, 30000);\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <input\n        type=\"text\"\n        placeholder=\"Show me all the MSEI students from CA\"\n        style={{ display: \"block\", width: \"95%\", height: \"40px\", margin: \"0 auto\", textAlign: \"center\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\" }}\n        value={inputValue}\n        onChange={handleInputChange}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit(e);\n          }\n        }}\n      />\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/greif-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n      <button \n        id=\"timeline\" \n        onClick={toggleTimelineMode}\n      >\n        {timelineMode ? 'Exit Timeline' : 'Timeline'}\n      </button>\n      \n      {/* Timeline Controls */}\n      {timelineMode && (\n        <div style={{\n          position: 'fixed',\n          bottom: '20px',\n          left: '50%',\n          transform: 'translateX(-50%)',\n          backgroundColor: 'white',\n          padding: '15px',\n          borderRadius: '8px',\n          boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\n          zIndex: 1000,\n          minWidth: '400px',\n          textAlign: 'center'\n        }}>\n          <h4 style={{ margin: '0 0 10px 0', color: '#333' }}>Network Timeline</h4>\n          <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>\n            <button\n              onClick={() => {\n                if (timelineDate) {\n                  const newDate = new Date(timelineDate.getTime() - 60000); // -1 minute\n                  updateTimelineDate(newDate);\n                }\n              }}\n              style={{\n                backgroundColor: '#2196F3',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontSize: '10px'\n              }}\n            >\n              -1m\n            </button>\n            <input\n              type=\"range\"\n              min={timelineStats?.earliest?.getTime() || Date.now() - 86400000} // Default to 24 hours ago if no earliest\n              max={timelineStats?.latest?.getTime() || Date.now()}\n              value={timelineDate?.getTime() || Date.now()}\n              step={60000} // 1 minute steps (60,000 milliseconds)\n              onChange={(e) => {\n                const timestamp = parseInt(e.target.value);\n                const date = new Date(timestamp);\n                updateTimelineDate(date);\n              }}\n              style={{ flex: 1 }}\n            />\n            <button\n              onClick={() => {\n                if (timelineDate) {\n                  const newDate = new Date(timelineDate.getTime() + 60000); // +1 minute\n                  updateTimelineDate(newDate);\n                }\n              }}\n              style={{\n                backgroundColor: '#2196F3',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontSize: '10px'\n              }}\n            >\n              +1m\n            </button>\n            <span style={{ fontSize: '12px', color: '#666', minWidth: '120px' }}>\n              {timelineDate ? `${timelineDate.toLocaleDateString()} ${timelineDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}` : 'Current Time'}\n            </span>\n          </div>\n          <div style={{ display: 'flex', gap: '10px', justifyContent: 'center', marginBottom: '10px' }}>\n            <button\n              onClick={() => {\n                if (timelineDate) {\n                  const newDate = new Date(timelineDate.getTime() - 300000); // -5 minutes\n                  updateTimelineDate(newDate);\n                }\n              }}\n              style={{\n                backgroundColor: '#4CAF50',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontSize: '10px'\n              }}\n            >\n              -5m\n            </button>\n\n            <button\n              onClick={() => loadTimelineData(new Date())}\n              style={{\n                backgroundColor: '#9C27B0',\n                color: 'white',\n                border: 'none',\n                padding: '6px 12px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontSize: '12px'\n              }}\n            >\n              Load Current\n            </button>\n            <button\n              onClick={() => {\n                if (timelineDate) {\n                  const newDate = new Date(timelineDate.getTime() + 300000); // +5 minutes\n                  updateTimelineDate(newDate);\n                }\n              }}\n              style={{\n                backgroundColor: '#4CAF50',\n                color: 'white',\n                border: 'none',\n                padding: '4px 8px',\n                borderRadius: '4px',\n                cursor: 'pointer',\n                fontSize: '10px'\n              }}\n            >\n              +5m\n            </button>\n          </div>\n          {timelineData && (\n            <div style={{ fontSize: '11px', color: '#666', display: 'flex', justifyContent: 'space-between' }}>\n              <span>Nodes: {timelineData.nodes.length}</span>\n              <span>Connections: {timelineData.links.length}</span>\n              <span>Time: {timelineDate?.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit', second:'2-digit'})}</span>\n            </div>\n          )}\n          {timelineStats && (\n            <div style={{ fontSize: '10px', color: '#999', marginTop: '8px', textAlign: 'center' }}>\n              Timeline: {timelineStats.earliest?.toLocaleDateString()} {timelineStats.earliest?.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} \n              to {timelineStats.latest?.toLocaleDateString()} {timelineStats.latest?.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n            </div>\n          )}\n        </div>\n      )}\n      \n      {/* Mutation processing indicator */}\n      {processingMutation && (\n        <div style={{\n          position: \"fixed\",\n          top: \"60px\",\n          right: \"10px\",\n          padding: \"8px 12px\",\n          backgroundColor: \"#9C27B0\",\n          color: \"white\",\n          borderRadius: \"4px\",\n          fontSize: \"12px\",\n          zIndex: 1000,\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"8px\"\n        }}>\n          <div style={{\n            width: \"8px\",\n            height: \"8px\",\n            borderRadius: \"50%\",\n            backgroundColor: \"#fff\",\n            animation: \"pulse 0.5s infinite\"\n          }}></div>\n          Processing Mutation...\n        </div>\n      )}\n\n      {/* Analytical Answer Modal */}\n      {showAnalyticalModal && analyticalAnswer && (\n        <div \n          style={{ \n            position: \"absolute\", \n            top: \"50%\", \n            left: \"50%\", \n            transform: \"translate(-50%, -50%)\", \n            width: \"80%\", \n            maxWidth: \"800px\",\n            maxHeight: \"80vh\",\n            backgroundColor: \"white\", \n            border: \"2px solid #3498db\", \n            borderRadius: \"10px\",\n            boxShadow: \"0px 0px 20px rgba(0, 0, 0, 0.3)\", \n            zIndex: 1000,\n            overflow: \"hidden\"\n          }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <div style={{\n            padding: \"15px 20px\",\n            backgroundColor: \"#3498db\",\n            color: \"white\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          }}>\n            <h3 style={{ margin: 0, fontSize: \"18px\" }}>{analyticalAnswer.question}</h3>\n            <button \n              onClick={() => {\n                setShowAnalyticalModal(false);\n                setAnalyticalAnswer(null);\n              }}\n              style={{\n                background: \"none\",\n                border: \"none\",\n                color: \"white\",\n                fontSize: \"20px\",\n                cursor: \"pointer\",\n                padding: \"0\",\n                width: \"30px\",\n                height: \"30px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\"\n              }}\n            >\n              ×\n            </button>\n          </div>\n          <div style={{ padding: \"0\", maxHeight: \"calc(80vh - 60px)\", overflow: \"hidden\" }}>\n            {analyticalAnswer.isHtml ? (\n              <div dangerouslySetInnerHTML={{ __html: analyticalAnswer.answer }} />\n            ) : (\n              <div style={{ padding: \"20px\", maxHeight: \"calc(80vh - 60px)\", overflowY: \"auto\" }}>\n                <p><strong>Answer:</strong> {analyticalAnswer.answer}</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n\n      \n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n        \n        @keyframes breathe {\n          0%, 100% { \n            transform: scale(1);\n            opacity: 1;\n          }\n          50% { \n            transform: scale(1.5);\n            opacity: 0.7;\n          }\n        }\n      `}</style>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={timelineMode && timelineData ? timelineData : data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.role || \"No Program Specified\"}\n  linkLabel={(link) => {\n    if (hoveredLink && hoveredLink.link === link) {\n      return hoveredLink.note || \"No note added\";\n    }\n    return null;\n  }}\n\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onLinkClick={handleLinkClick}\n  onLinkHover={handleLinkHover}\n\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n    setMutatedNodes([]);\n    setSelectedNode(null);\n    setShowAnalyticalModal(false);\n    setAnalyticalAnswer(null);\n    setSelectedLink(null);\n    setRelationshipData({});\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.website && node.website.toLowerCase().includes(inputValue.toLowerCase())));\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    \n    // Add breathing effect when user is idle or transitioning\n    let nodeRadius = 6;\n    const now = Date.now();\n    \n    // Frame rate optimization: only update every 60ms (16fps) for better performance\n    const frameRate = 60;\n    const time = Math.floor(now / frameRate) * frameRate * 0.001;\n    \n    if (!isUserActive) {\n      // Optimized breathing effect with cached calculations\n      // Use a simpler sine wave with reduced frequency for better performance\n      const breathingScale = 1 + 0.1 * Math.sin(time * 0.8); // Reduced frequency from 1.5 to 0.8\n      nodeRadius = 6 * breathingScale;\n    } else if (scaleTransitionStart && (now - scaleTransitionStart) < scaleTransitionDuration) {\n      // Optimized transition with cached calculations\n      const transitionProgress = Math.min((now - scaleTransitionStart) / scaleTransitionDuration, 1);\n      // Cache the breathing scale calculation\n      const breathingScale = 1 + 0.1 * Math.sin((scaleTransitionStart * 0.001) * 0.8);\n      const targetScale = 1;\n      const currentScale = breathingScale + (targetScale - breathingScale) * transitionProgress;\n      nodeRadius = 6 * currentScale;\n    }\n    \n    // Use latestNode for editing (black), pollingFocusNode for viewing (blue), or white for normal\n    let fillColor = \"white\";\n    if (node.name === latestNode) {\n      fillColor = \"black\"; // Editable node\n    } else if (node.name === pollingFocusNode) {\n      fillColor = \"green\"; // Non-editable polling focus\n    }\n    \n    // Add subtle color shift during breathing animation\n    if (!isUserActive && fillColor === \"white\") {\n      // Optimized color shift with reduced frequency and frame rate optimization\n      const colorShift = Math.sin(time * 0.8) * 0.1;\n      // Shift towards a very light blue during breathing\n      fillColor = `rgb(${255 + colorShift * 50}, ${255 + colorShift * 30}, ${255 + colorShift * 100})`;\n    } else if (scaleTransitionStart && (now - scaleTransitionStart) < scaleTransitionDuration && fillColor === \"white\") {\n      // Optimized color transition with cached calculations\n      const transitionProgress = (now - scaleTransitionStart) / scaleTransitionDuration;\n      // Cache the color shift calculation\n      const lastColorShift = Math.sin((scaleTransitionStart * 0.001) * 0.8) * 0.1;\n      const currentColorShift = lastColorShift * (1 - transitionProgress);\n      fillColor = `rgb(${255 + currentColorShift * 50}, ${255 + currentColorShift * 30}, ${255 + currentColorShift * 100})`;\n    }\n    \n    // Add subtle glow effect during breathing animation\n    // Removed shadow and alpha effects for performance\n    \n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, nodeRadius, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    // Reset shadow for text\n    ctx.shadowBlur = 0;\n    ctx.fillStyle = \"gray\";\n    \n    // Extract first name from full name\n    const firstName = node.name.split(' ')[0];\n    ctx.fillText(firstName, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    \n    // Check if this link is being hovered\n    const isHovered = hoveredLink && hoveredLink.link === link;\n    \n    if (isHovered) {\n      return '#000'; // Black when hovered\n    }\n    \n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {/* NFC Name Input Popup */}\n  {showNfcNamePopup && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Enter Info</h3>\n      <p><strong>Name:</strong>\n      <input \n        value={nfcNameInput} \n        onChange={(e) => setNfcNameInput(e.target.value)}\n        placeholder=\"Enter your name\" \n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            handleNfcNameSubmit();\n          }\n        }}\n      /></p>\n\n      <p><strong>Program:</strong>\n      <input \n        value={nfcRoleInput} \n        onChange={(e) => setNfcRoleInput(e.target.value)}\n        placeholder=\"e.g., MSEI, MSSE, MSBA, MBA, etc.\" \n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            handleNfcNameSubmit();\n          }\n        }}\n      /></p>\n\n      <p><button onClick={handleNfcNameSubmit} style={{ marginRight: \"10px\", padding: \"8px 16px\" }}>Continue</button>\n      <button onClick={() => {\n        setShowNfcNamePopup(false);\n        setNfcNameInput(\"\");\n        setNfcRoleInput(\"\");\n      }} style={{ padding: \"8px 16px\" }}>Cancel</button></p>\n    </div>\n  )}\n\n  {/* Profile Completion Popup (for new nodes) */}\n  {showProfilePopup && selectedNode && editedNode && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Complete Your Profile</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n        placeholder=\"Enter your name\" \n      onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><strong>Program:</strong>\n      <input \n        name=\"role\" \n        value={editedNode.role || \"\"} \n        placeholder=\"e.g., MSEI, MBA, BS, MS, PhD\" \n        onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><strong>Location:</strong>\n      <input \n        name=\"location\" \n        value={editedNode.location || \"\"} \n        placeholder=\"e.g., Los Angeles, CA\" \n        onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><strong>Email/Website:</strong>\n      <input \n        name=\"website\" \n        value={editedNode.website || \"\"} \n        placeholder=\"your.email@example.com\" \n        onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><button onClick={saveNewProfileFromNfc} style={{ marginRight: \"10px\", padding: \"8px 16px\" }}>Save Profile</button>\n      <button onClick={() => setShowProfilePopup(false)} style={{ padding: \"8px 16px\" }}>Cancel</button></p>\n    </div>\n  )}\n\n  {/* Regular Node Info Popup (for clicking on any node) */}\n  {selectedNode && !showProfilePopup && !showNfcNamePopup && !showNfcRelationshipPopup && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      {selectedNode?.role && <p><strong>Program:</strong> {selectedNode.role}</p>}\n      {selectedNode?.location && <p><strong>Location:</strong> {selectedNode.location}</p>}\n      {selectedNode?.website && <p><strong>Email:</strong>{\" \"}\n        <a href={`mailto:${selectedNode.website}`}>\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n      </p>}\n      \n\n    </div>\n  )}\n\n  {/* NFC Relationship Note Popup (only during NFC flow) */}\n  {showNfcRelationshipPopup && selectedNode && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Add Connection Note</h3>\n      <p><strong>Connected to:</strong> {selectedNode?.name}</p>\n      {selectedNode?.role && <p><strong>Program:</strong> {selectedNode.role}</p>}\n      {selectedNode?.location && <p><strong>Location:</strong> {selectedNode.location}</p>}\n      {selectedNode?.website && <p><strong>Email:</strong>{\" \"}\n        <a href={`mailto:${selectedNode.website}`}>\n          {selectedNode.website.length > 30 \n            ? `${selectedNode.website.substring(0, 30)}...`\n          : selectedNode.website}\n        </a>\n      </p>}\n      \n      <p><strong>Note:</strong>\n      <textarea \n        value={relationshipNote} \n        onChange={(e) => setRelationshipNote(e.target.value)}\n        placeholder=\"e.g., Met at USC networking event, Introduced by mutual friend, Worked together on project...\"\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\", minHeight: \"80px\", resize: \"vertical\" }}\n      /></p>\n\n      <p><button onClick={saveRelationshipNote} style={{ padding: \"8px 16px\" }}>Save</button></p>\n    </div>\n  )}\n\n  {/* Relationship Note Popup */}\n  {selectedLink && relationshipData && (\n    <div \n      style={{ position: \"absolute\", top: \"30%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Connection Details</h3>\n      <p><strong>From:</strong> {relationshipData.sourceName}</p>\n      <p><strong>To:</strong> {relationshipData.targetName}</p>\n      \n      {relationshipData.note ? (\n        <>\n          <p><strong>Note:</strong></p>\n          <div style={{ \n            backgroundColor: \"#f5f5f5\", \n            padding: \"10px\", \n            borderRadius: \"4px\", \n            marginTop: \"5px\",\n            fontStyle: \"italic\"\n          }}>\n            \"{relationshipData.note}\"\n          </div>\n        </>\n      ) : (\n        <p style={{ color: \"#666\", fontStyle: \"italic\" }}>No note added yet.</p>\n      )}\n      \n\n    </div>\n  )}\n\n\n\n  </div>\n  );\n    };\n\n    export default CypherViz;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://23f1f8d0.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'xQ3FQK4HZq5o-lbJJD5yHrTSdJQiejLW3iiejdoGs_E'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}