{"version":3,"sources":["CypherViz.js","App.js","serviceWorker.js","index.js"],"names":["CypherViz","driver","startBreathingAnimation","breathingInterval","clearInterval","setInterval","state","isUserActive","fgRef","current","triggerBreathingCycle","stopBreathingAnimation","breathingState","expandNodes","contractNodes","graph","currentStrength","strengthIncrement","rampUpForce","d3Force","d3","strength","d3ReheatSimulation","setTimeout","rampDuration","strengthDecrement","rampDownForce","updateUserActivity","now","Date","wasActive","setState","lastUserActivity","scaleTransitionStart","forceUpdate","idleTimeout","clearTimeout","checkIdleAndReturnToDefault","processingMutation","customQueryActive","customQueryTimeout","loadData","defaultQuery","startIdleDetection","forEach","event","document","addEventListener","idleCheckInterval","stopIdleDetection","removeEventListener","a","newNodeName","queryOverride","session","database","isCustomQuery","queryToExecute","query","pendingNFCNode","isMutationQuery","test","trim","console","error","validStartKeywords","queryStart","toUpperCase","some","keyword","startsWith","run","res","mutationReloadTimeout","pendingNode","isNFCOperation","focusOnNewNode","data","nodes","links","close","nodesMap","Map","records","record","has","get","source","target","set","name","role","location","website","x","Math","random","y","push","warn","keys","key","node","properties","identity","low","u_name","u_role","u_location","u_website","includes","replace","Array","from","values","updatedData","find","n","currentDataHash","calculateDataHash","hasChanged","lastDataHash","hasDetailedChange","isInitialLoad","hasDataChanged","isDataIdentical","JSON","stringify","localStorage","setItem","timeSinceLastUpdate","lastUpdateTime","forceUpdateForNFC","updateDebounceTime","updateCount","maxUpdatesPerCycle","nodeToSet","latestNode","changedNodesFromPolling","length","firstChangedNode","focusOnPollingNode","pollingFocusTimeout","pollingFocusNode","nodeName","graphData","attemptFocus","attempt","newNode","centerAt","zoom","focusOnMultipleNodes","nodeNames","nodesStr","map","sort","join","linksStr","l","newData","oldData","changedNodes","hasChanges","oldNodesMap","oldNode","oldLinksSet","Set","newLink","startPolling","pollingInterval","isPolling","hidden","updateCountResetInterval","stopPolling","connectWebSocket","disconnectWebSocket","websocket","wsConnected","useWebSocket","addNodeNFC","newUser","nfcUserName","capitalizedNewUser","capitalizeWords","str","split","word","charAt","slice","toLowerCase","capitalizedNfcUser","user","checkExistingUser","nodeToFocus","log","duplicateCheck","duplicateCount","toNumber","allNodes","bestRole","bestLocation","bestWebsite","nfcUser","checkCount","waitForStateUpdate","nodeExists","nfcNodeForAutoPopup","handleChange","newQuery","value","resetQuery","validateAndCleanQuery","currentQuery","onNfcPopupTriggered","React","createRef","defaultData","breathingAnimation","scaleTransitionDuration","this","handleVisibilityChange","path","element","addNode","Component","NFCTrigger","useLocation","username","useParams","useEffect","toString","substr","window","assign","addAndRedirect","style","textAlign","padding","fontSize","color","GraphView","useState","inputValue","setInputValue","selectedNode","setSelectedNode","editedNode","setEditedNode","focusNode","setFocusNode","clickedNode","setClickedNode","lastAction","setLastAction","mutatedNodes","setMutatedNodes","analyticalAnswer","setAnalyticalAnswer","showAnalyticalModal","setShowAnalyticalModal","relationshipNote","setRelationshipNote","nfcNameInput","setNfcNameInput","nfcRoleInput","setNfcRoleInput","showNfcNamePopup","setShowNfcNamePopup","showProfilePopup","setShowProfilePopup","pendingNfcName","setPendingNfcName","selectedLink","setSelectedLink","relationshipData","setRelationshipData","showNfcRelationshipPopup","setShowNfcRelationshipPopup","currentNfcConnection","setCurrentNfcConnection","hoveredLink","setHoveredLink","nfcNode","neighbors","add","link","getOneDegreeNodes","getNDegreeNodes","startNode","degree","visited","currentLevel","d","nextLevel","sourceName","targetName","visibilityFocus","zoomFocus","visibilityNodes","filter","match","neighbor","zoomNodes","searchMatches","searchNodes","mutationNodes","size","visibleNodes","xs","ys","minX","min","maxX","max","minY","maxY","centerX","centerY","width","height","scale","innerWidth","innerHeight","handleSubmit","e","preventDefault","fetch","method","headers","body","question","response","json","generatedQuery","text","pattern","result","answer","generateAnalyticalAnswer","displayAnalyticalAnswer","extractedNodes","deleteMatches","nameMatch","Boolean","matchClause","nodeMatches","handleLinkClick","relationshipResult","note","handleLinkHover","handleEditChange","prev","saveRelationshipNote","holderName","fallbackResult","existingName","nfcHolderResult","nfcHolderName","updateResult","handleNfcNameSubmit","capitalizedName","existingNodeCheck","existingNode","visitorName","saveNewProfileFromNfc","newName","questionLower","count","locations","uniqueLocations","roles","uniqueRoles","names","resultCount","type","placeholder","display","margin","border","borderRadius","onChange","input","onKeyPress","id","onClick","open","position","top","right","backgroundColor","zIndex","alignItems","gap","animation","left","transform","boxShadow","stopPropagation","ref","nodeId","nodeLabel","linkLabel","onNodeClick","onNodeHover","onLinkClick","onLinkHover","onBackgroundClick","nodeCanvasObject","ctx","isHighlighted","isNDegree","globalAlpha","nodeRadius","time","floor","transitionProgress","breathingScale","sin","fillColor","currentColorShift","colorShift","fillStyle","strokeStyle","lineWidth","beginPath","arc","PI","fill","stroke","shadowBlur","firstName","fillText","linkColor","isConnected","linkOpacity","linkCurvature","linkDirectionalArrowRelPos","linkDirectionalArrowLength","minWidth","marginTop","marginRight","href","substring","minHeight","resize","fontStyle","App","className","hostname","neo4j","process","NEO4J_URI","basic","NEO4J_USER","NEO4J_PASSWORD","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.03038c55.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { HashRouter as Router, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport './App.css';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport * as d3 from 'd3';\n\nclass CypherViz extends React.Component {\n  constructor({ driver }) {\n    super();\n    this.driver = driver;\n    this.fgRef = React.createRef();\n    \n    this.defaultData = {\n      nodes: [],\n      links: []\n    };\n    \n    this.state = {\n      data: this.defaultData,\n      query: `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n          RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n      v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`,\n      latestNode: null, // For NFC editing\n      pollingFocusNode: null, // For polling focus (non-editable)\n      lastUpdateTime: null,\n      isPolling: false,\n      useWebSocket: false,\n      wsConnected: false,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false,\n      lastUserActivity: Date.now(),\n      isUserActive: true,\n      nfcNodeForAutoPopup: null, // For auto-popup form on NFC tap\n\n    };\n\n    // Store the default query for polling (separate from user input)\n    this.defaultQuery = `MATCH (u:User)-[r:CONNECTED_TO]->(v:User) \n        RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n        v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite`;\n\n    // Store the last known data hash for change detection\n    this.lastDataHash = null;\n    this.pollingInterval = null;\n    this.websocket = null;\n    this.lastUpdateTime = 0;\n    this.updateDebounceTime = 2000; // 2 seconds debounce\n    this.updateCount = 0;\n    this.maxUpdatesPerCycle = 3; // Prevent infinite loops\n    this.mutationReloadTimeout = null;\n    this.idleTimeout = null;\n    this.idleCheckInterval = null;\n    this.isNFCOperation = false; // Flag to prevent double reload during NFC operations\n    this.changedNodesFromPolling = []; // Track nodes changed during polling\n    this.isInitialLoad = true; // Flag to prevent focusing on initial load\n    this.pollingFocusTimeout = null; // Timeout to clear polling focus\n    this.breathingAnimation = null; // For breathing animation\n    this.breathingState = 'expanded'; // 'contracted' or 'expanded'\n    this.breathingInterval = null; // Interval for breathing cycle\n    this.scaleTransitionStart = null; // For smooth scaling transition\n    this.scaleTransitionDuration = 1000; // 1 second transition\n\n  }\n\n  // Breathing animation methods\n  startBreathingAnimation = () => {\n    if (this.breathingInterval) {\n      clearInterval(this.breathingInterval);\n    }\n    \n    // Start breathing cycle every 4 seconds\n    this.breathingInterval = setInterval(() => {\n      if (!this.state.isUserActive && this.fgRef.current) {\n        this.triggerBreathingCycle();\n      }\n    }, 4000); // 4 second cycle\n  };\n\n  stopBreathingAnimation = () => {\n    if (this.breathingInterval) {\n      clearInterval(this.breathingInterval);\n      this.breathingInterval = null;\n    }\n    \n    // Reset to expanded state when stopping and clean up forces\n    if (this.fgRef.current && this.breathingState === 'contracted') {\n      this.expandNodes();\n    }\n  };\n\n  triggerBreathingCycle = () => {\n    if (this.breathingState === 'expanded') {\n      this.contractNodes();\n    } else {\n      this.expandNodes();\n    }\n  };\n\n  contractNodes = () => {\n    if (!this.fgRef.current) return;\n    \n    this.breathingState = 'contracted';\n    \n    // Get the current graph instance\n    const graph = this.fgRef.current;\n    \n    // Start with very low strength and gradually increase for smooth transition\n    let currentStrength = 0.01;\n    const targetStrength = 0.05;\n    const rampDuration = 2000; // 2 seconds to ramp up\n    const rampSteps = 20;\n    const strengthIncrement = (targetStrength - currentStrength) / rampSteps;\n    const stepInterval = rampDuration / rampSteps;\n    \n    const rampUpForce = () => {\n      if (currentStrength < targetStrength) {\n        currentStrength += strengthIncrement;\n        graph.d3Force('breathing-attraction', d3.forceRadial(0, 0, 10).strength(currentStrength));\n        graph.d3ReheatSimulation();\n        setTimeout(rampUpForce, stepInterval);\n      }\n    };\n    \n    // Start the gradual ramp-up\n    rampUpForce();\n    \n    // After 10 seconds, expand back (5x slower)\n    setTimeout(() => {\n      this.expandNodes();\n    }, 10000);\n  };\n\n  expandNodes = () => {\n    if (!this.fgRef.current) return;\n    \n    this.breathingState = 'expanded';\n    \n    // Get the current graph instance\n    const graph = this.fgRef.current;\n    \n    // Gradually reduce the breathing force for smooth expansion\n    const currentForce = graph.d3Force('breathing-attraction');\n    if (currentForce) {\n      let currentStrength = 0.05;\n      const rampDuration = 2000; // 2 seconds to ramp down\n      const rampSteps = 20;\n      const strengthDecrement = currentStrength / rampSteps;\n      const stepInterval = rampDuration / rampSteps;\n      \n      const rampDownForce = () => {\n        if (currentStrength > 0.001) {\n          currentStrength -= strengthDecrement;\n          graph.d3Force('breathing-attraction', d3.forceRadial(0, 0, 10).strength(currentStrength));\n          graph.d3ReheatSimulation();\n          setTimeout(rampDownForce, stepInterval);\n        } else {\n          // Completely remove the force when it's very small\n          graph.d3Force('breathing-attraction', null);\n          graph.d3ReheatSimulation();\n        }\n      };\n      \n      // Start the gradual ramp-down\n      rampDownForce();\n    }\n  };\n\n  // Update user activity timestamp\n  updateUserActivity = () => {\n    const now = Date.now();\n    const wasActive = this.state.isUserActive;\n    \n    this.setState({ \n      lastUserActivity: now,\n      isUserActive: true \n    });\n    \n    // If user just became active, stop breathing animation and start scale transition immediately\n    if (!wasActive) {\n      this.stopBreathingAnimation();\n      // Capture the exact breathing state at this moment to prevent jitter\n      this.scaleTransitionStart = now;\n      // Force an immediate re-render to start the transition\n      this.forceUpdate();\n    }\n    \n    // Clear existing idle timeout\n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n    }\n    \n    // Set new idle timeout (5 seconds of inactivity)\n    this.idleTimeout = setTimeout(() => {\n      this.setState({ isUserActive: false });\n      // Start breathing animation when user becomes idle\n      this.startBreathingAnimation();\n    }, 5000); // 5 seconds of inactivity\n  };\n\n  // Check if user is idle and should return to default query\n  checkIdleAndReturnToDefault = () => {\n    // Don't interfere if a mutation is being processed\n    if (this.state.processingMutation) {\n      return;\n    }\n    \n    if (this.state.customQueryActive && !this.state.isUserActive) {\n      this.setState({ \n        customQueryActive: false, \n        customQueryTimeout: null \n      });\n      \n      // Clear any existing timeout\n      if (this.state.customQueryTimeout) {\n        clearTimeout(this.state.customQueryTimeout);\n      }\n      \n      // Reload with default query\n      this.loadData(null, this.defaultQuery);\n    }\n  };\n\n  // Start idle detection system\n  startIdleDetection = () => {\n    // Set up activity listeners\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.addEventListener(event, this.updateUserActivity, true);\n    });\n    \n    // Check for idle state every 2 seconds\n    this.idleCheckInterval = setInterval(() => {\n      this.checkIdleAndReturnToDefault();\n    }, 2000);\n    \n    // Initial activity update\n    this.updateUserActivity();\n  };\n\n  // Stop idle detection\n  stopIdleDetection = () => {\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    activityEvents.forEach(event => {\n      document.removeEventListener(event, this.updateUserActivity, true);\n    });\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.idleTimeout) {\n      clearTimeout(this.idleTimeout);\n      this.idleTimeout = null;\n    }\n  };\n\n  loadData = async (newNodeName = null, queryOverride = null) => {\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    let res;\n    \n    // Determine which query to use\n    let queryToExecute = queryOverride;\n    let isCustomQuery = false;\n    \n    if (!queryToExecute) {\n      // For polling, use default query unless a custom query is active\n      if (newNodeName === null && !queryOverride && !this.state.customQueryActive) {\n        queryToExecute = this.defaultQuery;\n      } else {\n        // For user-initiated queries, use state.query but validate it\n        queryToExecute = this.state.query;\n        isCustomQuery = true;\n      }\n    } else if (queryOverride !== this.defaultQuery) {\n      // If a custom query is being executed\n      isCustomQuery = true;\n    }\n    \n    // Special handling for NFC operations - if we have a pending NFC node, \n    // we should use the default query to reload the graph after mutation\n    if (newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode) {\n      queryToExecute = this.defaultQuery;\n      isCustomQuery = false;\n    }\n    \n\n    \n    // Check if this is a mutation query BEFORE determining if it's custom\n    const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(queryToExecute.trim());\n    \n    // If it's a mutation query, it should never be treated as a custom query\n    if (isMutationQuery) {\n      isCustomQuery = false;\n    }\n    \n    // Validate the query\n    if (!queryToExecute || typeof queryToExecute !== 'string' || queryToExecute.trim() === '') {\n      console.error(\"Invalid query:\", queryToExecute);\n      return;\n    }\n    \n    // Check if query starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = queryToExecute.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      return;\n    }\n    \n    try {\n  \n              res = await session.run(queryToExecute);\n      \n              // Handle mutations for ALL queries (not just custom ones)\n        if (isMutationQuery) {\n        // For mutation queries, immediately return to default query\n        \n        // Force return to default state regardless of idle detection\n        this.setState({ \n          customQueryActive: false, \n          customQueryTimeout: null,\n          processingMutation: true,\n          isUserActive: true // Temporarily mark as active to prevent idle interference\n        });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Prevent multiple mutation reloads\n        if (this.mutationReloadTimeout) {\n          clearTimeout(this.mutationReloadTimeout);\n        }\n        \n        // Store the pending NFC node before reloading\n        const pendingNode = this.pendingNFCNode;\n        \n        // For NFC operations, don't trigger another reload since addNodeNFC already handles it\n        if (this.isNFCOperation) {\n          // Skip additional reload for NFC operations\n        } else if (!this.state.processingMutation) {\n          // Immediately reload with default query to show updated graph\n          this.loadData(pendingNode, this.defaultQuery);\n        }\n        \n        this.setState({ processingMutation: false });\n        this.mutationReloadTimeout = null;\n        \n        // For NFC operations, focusing is handled in addNodeNFC, so skip here\n        if (pendingNode && !this.isNFCOperation) {\n          setTimeout(() => {\n            this.focusOnNewNode(pendingNode, this.state.data);\n            this.pendingNFCNode = null;\n          }, 1500);\n        } else if (this.isNFCOperation) {\n          // NFC operation - focusing will be handled by addNodeNFC\n        } else {\n          // Reset NFC operation flag if no pending node\n          this.isNFCOperation = false;\n        }\n        \n        // Reset user activity state after a short delay to allow idle detection to work normally\n        setTimeout(() => {\n          this.updateUserActivity();\n        }, 100);\n        \n        // Return early to prevent processing mutation query results\n        return;\n      } else if (isCustomQuery) {\n        // For non-mutation custom queries, activate custom query state\n        this.setState({ customQueryActive: true });\n        \n        // Clear any existing timeout\n        if (this.state.customQueryTimeout) {\n          clearTimeout(this.state.customQueryTimeout);\n        }\n        \n        // Update user activity to reset idle timer\n        this.updateUserActivity();\n      }\n    } catch (err) {\n      console.error(\"Neo4j query failed:\", err);\n      console.error(\"Query was:\", queryToExecute);\n      this.setState({ data: { nodes: [], links: [] } });\n      return;\n    } finally {\n      session.close();\n    }\n\n\n    let nodesMap = new Map();\n    let links = [];\n\n    // Intelligent parser\n    res.records.forEach((record) => {\n      if (record.has(\"source\") && record.has(\"target\") && record.get(\"source\") && record.get(\"target\") && \n          typeof record.get(\"source\") === 'string' && typeof record.get(\"target\") === 'string') {\n        // standard case\n        let source = record.get(\"source\");\n        let target = record.get(\"target\");\n\n        if (!nodesMap.has(source)) {\n          nodesMap.set(source, {\n            name: source,\n            role: record.get(\"sourceRole\"),\n            location: record.get(\"sourceLocation\"),\n            website: record.get(\"sourceWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (!nodesMap.has(target)) {\n          nodesMap.set(target, {\n            name: target,\n            role: record.get(\"targetRole\"),\n            location: record.get(\"targetLocation\"),\n            website: record.get(\"targetWebsite\"),\n            x: Math.random() * 500,\n            y: Math.random() * 500,\n          });\n        }\n\n        if (nodesMap.has(source) && nodesMap.has(target)) {\n          links.push({ source, target });\n        } else {\n  console.warn(\"Invalid link skipped:\", { source, target });\n}\n      } else {\n        // fallback: node-only query\n        record.keys.forEach((key) => {\n          const node = record.get(key);\n          if (node && node.properties && node.identity) {\n            const name = node.properties.name || `Node-${node.identity.low}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.properties.role || \"\",\n                location: node.properties.location || \"\",\n                website: node.properties.website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (node && typeof node === 'object') {\n            // Handle SET query results that might have different structure\n            const name = node.name || node.u_name || `Node-${Date.now()}`;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: node.role || node.u_role || \"\",\n                location: node.location || node.u_location || \"\",\n                website: node.website || node.u_website || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          } else if (typeof node === 'string' && key.includes('name')) {\n            // Handle direct string values from queries like RETURN u.name, u.role\n            const name = node;\n            if (!nodesMap.has(name)) {\n              nodesMap.set(name, {\n                name,\n                role: record.get(key.replace('name', 'role')) || \"\",\n                location: record.get(key.replace('name', 'location')) || \"\",\n                website: record.get(key.replace('name', 'website')) || \"\",\n                x: Math.random() * 500,\n                y: Math.random() * 500,\n              });\n            }\n          }\n        });\n      }\n    });\n\n    const nodes = Array.from(nodesMap.values());\n    const updatedData = { nodes, links };\n    \n    // Check if our NFC node is in the parsed results\n    if (this.pendingNFCNode) {\n      const nfcNodeInResults = nodes.find(n => n.name === this.pendingNFCNode);\n    }\n\n    // Calculate hash of current data for change detection\n    const currentDataHash = this.calculateDataHash(updatedData);\n    const hasChanged = this.lastDataHash !== currentDataHash;\n    \n    // Also use more detailed change detection (but not during initial load)\n    const hasDetailedChange = this.isInitialLoad ? false : this.hasDataChanged(updatedData, this.state.data);\n    \n    // Additional check: if the data is exactly the same, don't update\n    const isDataIdentical = JSON.stringify(updatedData) === JSON.stringify(this.state.data);\n    \n\n    \n\n\n    localStorage.setItem(\"graphData\", JSON.stringify(updatedData));\n    \n    // Only update state if there's a change or if it's the initial load\n    const now = Date.now();\n    const timeSinceLastUpdate = now - this.lastUpdateTime;\n    \n    // Force update if we have a newNodeName (NFC operation) regardless of debounce\n    const forceUpdateForNFC = newNodeName && this.pendingNFCNode && newNodeName === this.pendingNFCNode;\n    \n    if ((hasChanged || hasDetailedChange || this.lastDataHash === null || forceUpdateForNFC) && \n        !isDataIdentical &&\n        (timeSinceLastUpdate > this.updateDebounceTime || this.lastDataHash === null || forceUpdateForNFC) &&\n        this.updateCount < this.maxUpdatesPerCycle) {\n      // Update the hash only when we actually update the state\n      this.lastDataHash = currentDataHash;\n      this.lastUpdateTime = now;\n      this.updateCount++;\n      \n      // Mark initial load as complete after first successful update\n      if (this.isInitialLoad) {\n        this.isInitialLoad = false;\n      }\n      \n      // Preserve latestNode if newNodeName is null but we have a valid latestNode\n      // Don't set latestNode during initial load\n      const nodeToSet = this.isInitialLoad ? null : (newNodeName || this.state.latestNode);\n      this.setState({ \n        data: updatedData, \n        latestNode: nodeToSet,\n        lastUpdateTime: hasChanged ? now : this.state.lastUpdateTime\n      }, () => {\n      if (newNodeName) {\n        // Focus on the new node with multiple attempts to ensure it works (NFC editing)\n        this.focusOnNewNode(newNodeName, updatedData);\n      } else if (this.changedNodesFromPolling.length > 0 && !this.isInitialLoad) {\n        // Focus on the first changed node from polling (but not on initial load) - non-editable\n        const firstChangedNode = this.changedNodesFromPolling[0];\n        this.focusOnPollingNode(firstChangedNode, updatedData);\n        \n        // Set a 10-second timeout to clear the focus\n        if (this.pollingFocusTimeout) {\n          clearTimeout(this.pollingFocusTimeout);\n        }\n        this.pollingFocusTimeout = setTimeout(() => {\n          this.setState({ pollingFocusNode: null });\n          this.pollingFocusTimeout = null;\n        }, 10000); // 10 seconds\n        \n        // Clear the changed nodes list after focusing\n        this.changedNodesFromPolling = [];\n      }\n    });\n    } else {\n      // Even if no change, we might need to update latestNode for new additions\n      if (newNodeName && this.state.latestNode !== newNodeName) {\n        this.setState({ latestNode: newNodeName });\n      }\n      // Reset update count when no changes are detected\n      this.updateCount = 0;\n    }\n  };\n\n    // Focus on a newly added node with multiple attempts\n  focusOnNewNode = (nodeName, graphData) => {\n    \n    const attemptFocus = (attempt = 1) => {\n      if (attempt > 5) {\n        return;\n      }\n\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\n      if (!newNode) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      if (!this.fgRef.current) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      try {\n            this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n            this.fgRef.current.zoom(1.25);\n        \n        // Also ensure the latestNode state is set\n        this.setState({ latestNode: nodeName });\n      } catch (error) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n      }\n    };\n\n    // Start with a longer delay for the first attempt to ensure graph is rendered\n    setTimeout(() => attemptFocus(1), 1000);\n  };\n\n  // Focus on polling changes (non-editable - sets pollingFocusNode)\n  focusOnPollingNode = (nodeName, graphData) => {\n    \n    const attemptFocus = (attempt = 1) => {\n      if (attempt > 5) {\n        return;\n      }\n\n      const newNode = graphData.nodes.find((n) => n.name === nodeName);\n      if (!newNode) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      if (!this.fgRef.current) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n        return;\n      }\n\n      try {\n        this.fgRef.current.centerAt(newNode.x, newNode.y, 1500);\n        this.fgRef.current.zoom(1.25);\n        \n        // Set pollingFocusNode (non-editable)\n        this.setState({ pollingFocusNode: nodeName });\n      } catch (error) {\n        setTimeout(() => attemptFocus(attempt + 1), 500);\n      }\n    };\n\n    // Start with a longer delay for the first attempt to ensure graph is rendered\n    setTimeout(() => attemptFocus(1), 1000);\n  };\n\n  // Focus on multiple nodes (for future use)\n  focusOnMultipleNodes = (nodeNames, graphData) => {\n    if (!nodeNames || nodeNames.length === 0) return;\n    \n    // For now, focus on the first node\n    // In the future, this could calculate a bounding box of all nodes\n    this.focusOnNewNode(nodeNames[0], graphData);\n  };\n\n  // Calculate a simple hash of the graph data for change detection\n  calculateDataHash = (data) => {\n    // Only hash the actual data, not the random coordinates\n    const nodesStr = data.nodes.map(n => `${n.name}:${n.role}:${n.location}:${n.website}`).sort().join('|');\n    const linksStr = data.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }).sort().join('|');\n    return `${nodesStr}|${linksStr}`;\n  };\n\n  // More detailed change detection with change tracking\n  hasDataChanged = (newData, oldData) => {\n    if (!oldData || !oldData.nodes || !oldData.links) return true;\n    \n    let changedNodes = [];\n    let hasChanges = false;\n    \n    // Check if number of nodes or links changed\n    if (newData.nodes.length !== oldData.nodes.length || \n        newData.links.length !== oldData.links.length) {\n      hasChanges = true;\n    }\n    \n    // Check if any node properties changed\n    const oldNodesMap = new Map(oldData.nodes.map(n => [n.name, n]));\n    for (const newNode of newData.nodes) {\n      const oldNode = oldNodesMap.get(newNode.name);\n      if (!oldNode) {\n        // New node added\n        changedNodes.push(newNode.name);\n        hasChanges = true;\n      } else if (oldNode.role !== newNode.role || \n                 oldNode.location !== newNode.location || \n                 oldNode.website !== newNode.website) {\n        // Existing node modified\n        changedNodes.push(newNode.name);\n        hasChanges = true;\n      }\n    }\n    \n    // Check if any links changed\n    const oldLinksSet = new Set(oldData.links.map(l => {\n      const source = typeof l.source === 'object' ? l.source.name : l.source;\n      const target = typeof l.target === 'object' ? l.target.name : l.target;\n      return `${source}:${target}`;\n    }));\n    \n    for (const newLink of newData.links) {\n      const source = typeof newLink.source === 'object' ? newLink.source.name : newLink.source;\n      const target = typeof newLink.target === 'object' ? newLink.target.name : newLink.target;\n      if (!oldLinksSet.has(`${source}:${target}`)) {\n        // New link added - focus on both source and target nodes\n        if (!changedNodes.includes(source)) changedNodes.push(source);\n        if (!changedNodes.includes(target)) changedNodes.push(target);\n        hasChanges = true;\n      }\n    }\n    \n    // Store changed nodes for focusing\n    if (hasChanges && changedNodes.length > 0) {\n      this.changedNodesFromPolling = changedNodes;\n    }\n    \n    return hasChanges;\n  };\n\n  // Start polling for changes\n  startPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n    \n    this.setState({ isPolling: true });\n    this.pollingInterval = setInterval(() => {\n      // Only poll if the tab is active (to save resources)\n      if (!document.hidden) {\n        // Use default query for polling, but respect custom query state, mutation processing, and NFC operations\n        if (this.state.customQueryActive || this.state.processingMutation || this.isNFCOperation) {\n          return;\n        }\n        // Don't preserve latestNode during polling - let change detection determine focus\n        this.loadData(null, this.defaultQuery);\n      }\n    }, 5000); // Check every 5 seconds\n    \n    // Reset update count every 30 seconds to prevent permanent blocking\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n    }\n    this.updateCountResetInterval = setInterval(() => {\n      this.updateCount = 0;\n    }, 30000);\n  };\n\n  // Stop polling\n  stopPolling = () => {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n    if (this.updateCountResetInterval) {\n      clearInterval(this.updateCountResetInterval);\n      this.updateCountResetInterval = null;\n    }\n    this.setState({ isPolling: false });\n  };\n\n  // WebSocket methods for real-time updates (disabled for now)\n  connectWebSocket = () => {\n    // WebSocket is disabled - using polling instead\n    // Uncomment and configure when WebSocket server is available\n    /*\n    try {\n      this.websocket = new WebSocket('wss://your-websocket-server.com');\n      \n      this.websocket.onopen = () => {\n        this.setState({ wsConnected: true, useWebSocket: true });\n      };\n      \n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        if (message.type === 'graph_update') {\n          this.loadData(null, this.defaultQuery);\n        }\n      };\n      \n      this.websocket.onclose = () => {\n        this.setState({ wsConnected: false });\n        setTimeout(() => {\n          if (!this.state.isPolling) {\n            this.startPolling();\n          }\n        }, 5000);\n      };\n      \n      this.websocket.onerror = (error) => {\n        this.setState({ wsConnected: false });\n      };\n    } catch (error) {\n      this.startPolling();\n    }\n    */\n    \n    // Start polling directly since WebSocket is disabled\n    this.startPolling();\n  };\n\n  disconnectWebSocket = () => {\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n    this.setState({ wsConnected: false, useWebSocket: false });\n  };\n\n  // Enhanced componentDidMount to start polling directly\n  componentDidMount() {\n    // Validate and clean the query state first\n    this.validateAndCleanQuery();\n    \n    this.loadData();\n    \n    // Start polling (WebSocket is disabled)\n    this.connectWebSocket();\n    \n    // Add visibility change listener to pause polling when tab is not active\n    this.handleVisibilityChange = () => {\n      // Tab visibility change handling\n    };\n    \n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n    \n    // Start idle detection\n    this.startIdleDetection();\n  }\n\n  componentWillUnmount() {\n    // Clean up both polling and WebSocket\n    this.stopPolling();\n    this.disconnectWebSocket();\n    \n    // Clear custom query timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n    \n    // Clear mutation reload timeout\n    if (this.mutationReloadTimeout) {\n      clearTimeout(this.mutationReloadTimeout);\n      this.mutationReloadTimeout = null;\n    }\n    \n    // Clear processing mutation state\n    this.setState({ processingMutation: false });\n    \n    // Clear polling focus timeout\n    if (this.pollingFocusTimeout) {\n      clearTimeout(this.pollingFocusTimeout);\n      this.pollingFocusTimeout = null;\n    }\n    \n    // Stop breathing animation\n    this.stopBreathingAnimation();\n    \n    // Stop idle detection\n    this.stopIdleDetection();\n    \n    // Remove visibility change listener\n    if (this.handleVisibilityChange) {\n      document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n  }\n\n  addNodeNFC = async (newUser, nfcUserName) => {\n    // Helper function to capitalize first letter of each word\n    const capitalizeWords = (str) => {\n      if (!str) return str;\n      return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n    };\n\n    const capitalizedNewUser = capitalizeWords(newUser);\n    const capitalizedNfcUser = capitalizeWords(nfcUserName);\n\n    // Set NFC operation flag to prevent double reload\n    this.isNFCOperation = true;\n\n    // Clear any existing pending NFC node to prevent conflicts\n    if (this.pendingNFCNode) {\n      this.pendingNFCNode = null;\n    }\n\n    let session = this.driver.session({ database: \"neo4j\" });\n    try {\n      // First, check if a node with the same name as the new user already exists\n      const checkExistingUser = await session.run(\n        `MATCH (u:User {name: $user}) RETURN u.name as name`,\n        { user: capitalizedNewUser }\n      );\n\n      let nodeToFocus = capitalizedNewUser;\n      let isExistingNode = false;\n\n      if (checkExistingUser.records.length > 0) {\n        // Node with this name already exists, use the existing node\n        console.log(`Node with name \"${capitalizedNewUser}\" already exists, using existing node`);\n        isExistingNode = true;\n        nodeToFocus = capitalizedNewUser;\n      } else {\n        // Node doesn't exist, create a new one\n        console.log(`Creating new node with name \"${capitalizedNewUser}\"`);\n      }\n\n      // Only run duplicate cleanup for new nodes, not for existing nodes being merged\n      if (!this.isNFCOperation || !this.pendingNFCNode) {\n        // First, check if there are multiple nodes with the same name and merge them\n        const duplicateCheck = await session.run(\n          `MATCH (u:User {name: $user})\n           RETURN count(u) as count`,\n          { user: capitalizedNewUser }\n        );\n        \n        const duplicateCount = duplicateCheck.records[0].get('count').toNumber();\n        \n        if (duplicateCount > 1) {\n          console.log(`Found ${duplicateCount} duplicate nodes for \"${capitalizedNewUser}\", merging them...`);\n          \n          // Get all nodes with this name and their properties\n          const allNodes = await session.run(\n            `MATCH (u:User {name: $user})\n             RETURN u.role as role, u.location as location, u.website as website\n             ORDER BY u.role DESC, u.location DESC, u.website DESC`,\n            { user: capitalizedNewUser }\n          );\n          \n          // Find the best properties (non-empty values)\n          let bestRole = '';\n          let bestLocation = '';\n          let bestWebsite = '';\n          \n          allNodes.records.forEach(record => {\n            const role = record.get('role');\n            const location = record.get('location');\n            const website = record.get('website');\n            \n            if (role && role !== '') bestRole = role;\n            if (location && location !== '') bestLocation = location;\n            if (website && website !== '') bestWebsite = website;\n          });\n          \n          // Delete all nodes with this name and recreate with best properties\n          await session.run(\n            `MATCH (u:User {name: $user})\n             DETACH DELETE u`,\n            { user: capitalizedNewUser }\n          );\n          \n          // Create a single node with the best properties\n          await session.run(\n            `CREATE (u:User {name: $user, role: $role, location: $location, website: $website})`,\n            { \n              user: capitalizedNewUser,\n              role: bestRole,\n              location: bestLocation,\n              website: bestWebsite\n            }\n          );\n          \n          console.log(`Merged duplicate nodes for \"${capitalizedNewUser}\" with properties:`, { bestRole, bestLocation, bestWebsite });\n        }\n      }\n\n      // Create or connect the nodes\n      await session.run(\n        `MERGE (u:User {name: $user}) \n         ON CREATE SET u.role = '', \n                       u.location = '', \n                       u.website = ''\n\n         MERGE (nfc:User {name: $nfcUser}) \n         ON CREATE SET nfc.role = '', \n                       nfc.location = '', \n                       nfc.website = ''\n\n         MERGE (u)-[:CONNECTED_TO]->(nfc) \n        `,\n        { \n          user: capitalizedNewUser, \n          nfcUser: capitalizedNfcUser\n        }\n        );\n      \n      // Store the node name for focusing after mutation completes\n      this.pendingNFCNode = nodeToFocus;\n      \n      // Trigger a single loadData call to reload the graph with the node\n      await this.loadData(nodeToFocus, this.defaultQuery);\n      \n      // Wait for the state to be updated, then focus and auto-popup form\n      let checkCount = 0;\n      const waitForStateUpdate = () => {\n        const nodeExists = this.state.data.nodes.find(n => n.name === nodeToFocus);\n        checkCount++;\n        \n        if (nodeExists) {\n          this.focusOnNewNode(nodeToFocus, this.state.data);\n          this.pendingNFCNode = null;\n          this.isNFCOperation = false;\n          \n          // Auto-popup the form for the NFC node (whether new or existing)\n          this.setState({ \n            nfcNodeForAutoPopup: nodeToFocus \n          });\n        } else if (checkCount < 10) { // Limit retries to prevent infinite loops\n          setTimeout(waitForStateUpdate, 500);\n        } else {\n          console.error(\"Failed to find node in state after multiple attempts\");\n          this.pendingNFCNode = null;\n          this.isNFCOperation = false;\n        }\n      };\n      \n      // Start checking for state update after a short delay\n      setTimeout(waitForStateUpdate, 1000);\n      \n    } catch (error) {\n      console.error(\"Error adding user:\", error);\n      this.pendingNFCNode = null;\n      this.isNFCOperation = false;\n    } finally {\n      session.close();\n    }\n  };\n\n  handleChange = (event) => {\n    // Only update the query state if it's a valid Cypher query or empty\n    const newQuery = event.target.value;\n    \n    // Allow empty queries (for clearing)\n    if (!newQuery || newQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = newQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (isValidQuery) {\n      this.setState({ query: newQuery });\n    }\n  };\n\n  // Method to reset query to default\n  resetQuery = () => {\n    this.setState({ \n      query: this.defaultQuery,\n      customQueryActive: false,\n      customQueryTimeout: null,\n      processingMutation: false\n    });\n    \n    // Clear any existing timeout\n    if (this.state.customQueryTimeout) {\n      clearTimeout(this.state.customQueryTimeout);\n    }\n  };\n\n  // Method to validate and clean the current query state\n  validateAndCleanQuery = () => {\n    const currentQuery = this.state.query;\n    \n    // Check if current query is valid\n    if (!currentQuery || typeof currentQuery !== 'string' || currentQuery.trim() === '') {\n      this.setState({ query: this.defaultQuery });\n      return;\n    }\n    \n    // Check if it starts with valid Cypher keywords\n    const validStartKeywords = ['MATCH', 'CREATE', 'MERGE', 'DELETE', 'SET', 'RETURN', 'WITH', 'UNWIND', 'CALL'];\n    const queryStart = currentQuery.trim().toUpperCase();\n    const isValidQuery = validStartKeywords.some(keyword => queryStart.startsWith(keyword));\n    \n    if (!isValidQuery) {\n      this.setState({ query: this.defaultQuery });\n    }\n  };\n\n  // Callback to clear NFC popup trigger\n  onNfcPopupTriggered = () => {\n    this.setState({ nfcNodeForAutoPopup: null });\n  };\n\n  render() {\n    return (\n      <Router>\n      <div>\n      <Routes>\n      <Route path=\"/:username\" element={<NFCTrigger addNode={this.addNodeNFC} />} />\n      <Route path=\"/\" element={\n        <GraphView \n        data={this.state.data} \n        handleChange={this.handleChange} \n        loadData={this.loadData} \n        fgRef={this.fgRef} \n        latestNode={this.state.latestNode} \n        pollingFocusNode={this.state.pollingFocusNode}\n    driver={this.driver} // Pass the driver\n        processingMutation={this.state.processingMutation}\n        updateUserActivity={this.updateUserActivity}\n        isUserActive={this.state.isUserActive}\n        scaleTransitionStart={this.scaleTransitionStart}\n        scaleTransitionDuration={this.scaleTransitionDuration}\n        nfcNodeForAutoPopup={this.state.nfcNodeForAutoPopup}\n        onNfcPopupTriggered={this.onNfcPopupTriggered}\n    />\n  } />\n  </Routes>\n  \n\n  </div>\n  </Router>\n  );\n}\n}\n\nconst NFCTrigger = ({ addNode }) => {\n  const location = useLocation();\n  const { username } = useParams();\n\n  React.useEffect(() => {\n    const addAndRedirect = async () => {\n      // Generate a unique identifier for the person tapping the NFC tag\n      // This could be based on device info, session, or a random ID\n      const newUser = `Visitor-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      console.log(`NFC Trigger: Starting NFC operation for ${username} with visitor ${newUser}`);\n\n      try {\n        await addNode(newUser, username); // newUser = visitor, username = NFC tag owner\n        console.log(`NFC Trigger: addNode completed successfully`);\n        } catch (error) {\n          console.error(\"NFC Trigger: Error adding user:\", error);\n          return;\n        }\n\n        setTimeout(() => {\n          window.location.assign(\"/GreifNet/#/\");\n          }, 2000);\n        };\n\n        addAndRedirect();\n        }, [location, username]);\n\n        return <div style={{ textAlign: \"center\", padding: \"20px\", fontSize: \"16px\", color: \"red\" }}>Adding you to {username}'s network...</div>\n      };\n\n              const GraphView = ({ data, handleChange, loadData, fgRef, latestNode, pollingFocusNode, driver, processingMutation, updateUserActivity, isUserActive, scaleTransitionStart, scaleTransitionDuration, nfcNodeForAutoPopup, onNfcPopupTriggered }) => {\n        const [inputValue, setInputValue] = useState(\"\"); \n        const [selectedNode, setSelectedNode] = useState(null);\n        const [editedNode, setEditedNode] = useState(null);\n        const [focusNode, setFocusNode] = useState(null);\n        const [clickedNode, setClickedNode] = useState(null);\n        const [lastAction, setLastAction] = useState(null); // 'search', 'click', 'latestNode', or 'mutation'\n        const [mutatedNodes, setMutatedNodes] = useState([]); // Track nodes created/modified by mutation queries\n        const [analyticalAnswer, setAnalyticalAnswer] = useState(null); // For displaying analytical answers\n        const [showAnalyticalModal, setShowAnalyticalModal] = useState(false); // For showing/hiding the answer modal\n        const [relationshipNote, setRelationshipNote] = useState(\"\"); // For relationship notes when connecting to existing nodes\n        const [nfcNameInput, setNfcNameInput] = useState(\"\");\n        const [nfcRoleInput, setNfcRoleInput] = useState(\"\"); // For initial NFC name input\n        const [showNfcNamePopup, setShowNfcNamePopup] = useState(false); // For showing NFC name input popup\n        const [showProfilePopup, setShowProfilePopup] = useState(false); // For showing profile completion popup\n        const [pendingNfcName, setPendingNfcName] = useState(\"\"); // Store the name that was entered\n        const [selectedLink, setSelectedLink] = useState(null); // For selected relationship/link\n        const [relationshipData, setRelationshipData] = useState({}); // Store relationship data\n        const [showNfcRelationshipPopup, setShowNfcRelationshipPopup] = useState(false);\n        const [currentNfcConnection, setCurrentNfcConnection] = useState(null); // For NFC relationship note popup\n        const [hoveredLink, setHoveredLink] = useState(null); // For link hover effects\n\n        // Detect when latestNode changes (NFC addition) and set lastAction\n        useEffect(() => {\n          if (latestNode) {\n            setLastAction('latestNode');\n          }\n        }, [latestNode]);\n\n        // Auto-popup form for NFC nodes\n        useEffect(() => {\n          if (nfcNodeForAutoPopup && data.nodes.length > 0) {\n            // Find the NFC node in the data\n            const nfcNode = data.nodes.find(node => node.name === nfcNodeForAutoPopup);\n            if (nfcNode) {\n              // Show the initial name input popup for NFC nodes\n              setShowNfcNamePopup(true);\n              setNfcNameInput(\"\");\n              setFocusNode(nfcNode.name);\n              setClickedNode(nfcNode.name);\n              setLastAction('latestNode');\n              \n              // Clear the nfcNodeForAutoPopup after triggering the popup\n              if (typeof onNfcPopupTriggered === 'function') {\n                onNfcPopupTriggered();\n              }\n            }\n          }\n        }, [nfcNodeForAutoPopup, data.nodes]);\n\n        // Initial zoom when graph first loads\n        useEffect(() => {\n          if (fgRef.current && data.nodes.length > 0 && !lastAction) {\n            // Wait a bit for the graph to settle, then zoom to 2x\n            setTimeout(() => {\n              if (fgRef.current) {\n                fgRef.current.zoom(2, 1000);\n              }\n            }, 1000);\n          }\n        }, [data.nodes, fgRef, lastAction]);\n\n        // Compute 1-degree neighbors of latestNode\n        const getOneDegreeNodes = () => {\n          if (!latestNode || !data) return new Set();\n          const neighbors = new Set();\n          neighbors.add(latestNode);\n          data.links.forEach(link => {\n            if (link.source === latestNode) neighbors.add(link.target);\n            if (link.target === latestNode) neighbors.add(link.source);\n          });\n          return neighbors;\n        };\n        const oneDegreeNodes = getOneDegreeNodes();\n\n        // Compute N-degree neighbors of latestNode\n        const visibleDegree = 1; // Change this value to adjust visible degree\n        const getNDegreeNodes = (startNode, degree) => {\n          if (!startNode || !data) return new Set();\n          const visited = new Set();\n          let currentLevel = new Set([startNode]);\n          for (let d = 0; d < degree; d++) {\n            const nextLevel = new Set();\n            data.links.forEach(link => {\n              // Normalize source/target to node names if they are objects\n              const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n              const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n              currentLevel.forEach(n => {\n                if (n === sourceName && !visited.has(targetName)) {\n                  nextLevel.add(targetName);\n                }\n                if (n === targetName && !visited.has(sourceName)) {\n                  nextLevel.add(sourceName);\n                }\n              });\n            });\n            nextLevel.forEach(n => visited.add(n));\n            currentLevel.forEach(n => visited.add(n));\n            currentLevel = nextLevel;\n          }\n          visited.add(startNode);\n          return visited;\n        };\n        // For visibility: use hover (focusNode) if available, otherwise clicked node, otherwise latestNode\n        const visibilityFocus = focusNode || clickedNode || latestNode;\n        // For zoom: use the most recent action\n        const zoomFocus = lastAction === 'search' ? 'search' : \n                         lastAction === 'click' ? clickedNode : \n                         lastAction === 'latestNode' ? latestNode :\n                         lastAction === 'mutation' ? mutatedNodes[0] : null;\n        const visibilityNodes = getNDegreeNodes(visibilityFocus, visibleDegree);\n        \n        // Always include search results in visibility if there's a search term\n        if (inputValue && inputValue.trim()) {\n          const searchMatches = data.nodes.filter(node => \n            node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n            (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())) ||\n            (node.website && node.website.toLowerCase().includes(inputValue.toLowerCase()))\n          );\n          searchMatches.forEach(match => {\n            const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n            matchNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        // Always include mutated nodes in visibility if there was a mutation\n        if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n          mutatedNodes.forEach(nodeName => {\n            const nodeNeighbors = getNDegreeNodes(nodeName, 0); // Always use 0 degree for mutations\n            nodeNeighbors.forEach(neighbor => visibilityNodes.add(neighbor));\n          });\n        }\n        \n        const zoomNodes = lastAction === 'search' ? \n                         (() => {\n                           const searchMatches = data.nodes.filter(node => \n                             node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                             (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())) ||\n                             (node.website && node.website.toLowerCase().includes(inputValue.toLowerCase()))\n                           );\n                           const searchNodes = new Set();\n                           searchMatches.forEach(match => {\n                             const matchNeighbors = getNDegreeNodes(match.name, visibleDegree);\n                             matchNeighbors.forEach(neighbor => searchNodes.add(neighbor));\n                           });\n                           return searchNodes;\n                         })() : \n                         lastAction === 'mutation' ?\n                         (() => {\n                           const mutationNodes = new Set();\n                           mutatedNodes.forEach(nodeName => {\n                             const nodeNeighbors = getNDegreeNodes(nodeName, 1); // Always use 1 degree for mutations\n                             nodeNeighbors.forEach(neighbor => mutationNodes.add(neighbor));\n                           });\n                           return mutationNodes;\n                         })() :\n                         getNDegreeNodes(zoomFocus, visibleDegree);\n        \n        // Auto-zoom to visible nodes\n        useEffect(() => {\n          // Only auto-zoom if there's a search term or if a node was clicked (not just hovered)\n          // Don't auto-zoom for latestNode unless there's no other focus\n          if (fgRef.current && zoomNodes.size > 0) {\n            // Zoom based on last action\n            if (lastAction === 'click' && clickedNode) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For search results (only if no node is clicked)\n            else if (lastAction === 'search' && inputValue) {\n              const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n              if (visibleNodes.length > 0) {\n                // Calculate bounding box of visible nodes\n                const xs = visibleNodes.map(n => n.x);\n                const ys = visibleNodes.map(n => n.y);\n                const minX = Math.min(...xs);\n                const maxX = Math.max(...xs);\n                const minY = Math.min(...ys);\n                const maxY = Math.max(...ys);\n                \n                const centerX = (minX + maxX) / 2;\n                const centerY = (minY + maxY) / 2;\n                const width = maxX - minX;\n                const height = maxY - minY;\n                \n                // Add some padding\n                const padding = 100;\n                const scale = Math.min(\n                  (window.innerWidth - padding) / width,\n                  (window.innerHeight - padding) / height,\n                  2 // Max zoom level\n                );\n                \n                fgRef.current.centerAt(centerX, centerY, 1000);\n                fgRef.current.zoom(scale, 1000);\n              }\n            }\n            // For latestNode, delay the zoom to allow graph to stabilize\n            else if (lastAction === 'latestNode' && latestNode) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for latestNode\n            }\n            // For mutation queries, zoom to the mutated nodes\n            else if (lastAction === 'mutation' && mutatedNodes.length > 0) {\n              setTimeout(() => {\n                const visibleNodes = data.nodes.filter(node => zoomNodes.has(node.name));\n                if (visibleNodes.length > 0 && fgRef.current) {\n                  // Calculate bounding box of visible nodes\n                  const xs = visibleNodes.map(n => n.x);\n                  const ys = visibleNodes.map(n => n.y);\n                  const minX = Math.min(...xs);\n                  const maxX = Math.max(...xs);\n                  const minY = Math.min(...ys);\n                  const maxY = Math.max(...ys);\n                  \n                  const centerX = (minX + maxX) / 2;\n                  const centerY = (minY + maxY) / 2;\n                  const width = maxX - minX;\n                  const height = maxY - minY;\n                  \n                  // Add some padding\n                  const padding = 100;\n                  const scale = Math.min(\n                    (window.innerWidth - padding) / width,\n                    (window.innerHeight - padding) / height,\n                    2 // Max zoom level\n                  );\n                  \n                  fgRef.current.centerAt(centerX, centerY, 1000);\n                  fgRef.current.zoom(scale, 1000);\n                }\n              }, 1000); // 1 second delay for mutation\n            }\n          }\n        }, [zoomNodes, data.nodes, fgRef, lastAction, clickedNode, latestNode, inputValue, mutatedNodes]);\n\n        const handleInputChange = (event) => {\n          const input = event.target.value;\n          setInputValue(input);\n          handleChange(event); // updates CypherViz state.query too\n          \n          // Update user activity when typing\n          updateUserActivity();\n          \n          // Clear other actions when searching\n          if (input.trim()) {\n            setClickedNode(null);\n            setLastAction('search');\n          }\n        };\n\n        const handleSubmit = async (e) => {\n          e.preventDefault();\n\n          try {\n            const response = await fetch(\"https://flowise-hako.onrender.com/api/v1/prediction/29e305b3-c569-4676-a454-1c4fdc380c69\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ question: inputValue })\n            });\n\n            const data = await response.json();\n            const generatedQuery = data.text || data.query || \"\";\n\n            // More specific detection for true analytical questions vs visualization requests\n            const isTrueAnalyticalQuestion = (() => {\n              const question = inputValue.toLowerCase();\n              const analyticalKeywords = ['how many', 'how much', 'what is', 'what are', 'when', 'where', 'why', 'who', 'which', 'how', 'what'];\n              \n              // True analytical questions that ask for specific data points\n              const analyticalPatterns = [\n                /how many/i,\n                /how much/i,\n                /what is the (count|number|total)/i,\n                /what are the (count|numbers|totals)/i,\n                /count of/i,\n                /total number of/i,\n                /how many (artists|users|people|connections|relationships)/i,\n                /what (roles|locations|websites) (exist|are there)/i,\n                /which (roles|locations|websites)/i,\n                /what is the most common/i,\n                /what is the average/i,\n                /how many people are (in|from)/i\n              ];\n              \n              // Visualization requests that should NOT be treated as analytical\n              const visualizationPatterns = [\n                /show me/i,\n                /display/i,\n                /visualize/i,\n                /find/i,\n                /search for/i,\n                /look for/i,\n                /get/i,\n                /bring up/i,\n                /open/i\n              ];\n              \n              // If it matches visualization patterns, it's NOT analytical\n              if (visualizationPatterns.some(pattern => pattern.test(question))) {\n                return false;\n              }\n              \n              // If it matches analytical patterns, it IS analytical\n              if (analyticalPatterns.some(pattern => pattern.test(question))) {\n                return true;\n              }\n              \n              // Default: if it contains analytical keywords but doesn't match visualization patterns\n              return analyticalKeywords.some(keyword => question.includes(keyword));\n            })();\n\n            if (isTrueAnalyticalQuestion) {\n              // For analytical questions, execute the query and provide a text answer\n              try {\n                const session = driver.session({ database: \"neo4j\" });\n                const result = await session.run(generatedQuery);\n                await session.close();\n\n                // Generate a human-readable answer based on the query results\n                const answer = generateAnalyticalAnswer(inputValue, result, generatedQuery);\n                \n                // Display the answer in a modal or notification\n                displayAnalyticalAnswer(answer, inputValue);\n                \n                // Clear the input after showing the answer\n                setTimeout(() => {\n                  setInputValue(\"\");\n                }, 5000); // Keep answer visible longer for analytical questions\n                \n              } catch (queryError) {\n                console.error(\"Error executing analytical query:\", queryError);\n                displayAnalyticalAnswer(\"Sorry, I couldn't analyze that question. Please try rephrasing it.\", inputValue);\n              }\n            } else {\n              // For regular queries, proceed with the existing logic\n              setInputValue(generatedQuery);\n              handleChange({ target: { value: generatedQuery } });\n\n              await loadData(null, generatedQuery);\n\n              // Check if the generated query is a mutation query (updates the graph)\n              const isMutationQuery = /(CREATE|MERGE|SET|DELETE|REMOVE|DETACH DELETE)/i.test(generatedQuery.trim());\n              \n              // If it's a mutation query, immediately return to default state\n              if (isMutationQuery) {\n                \n                // Extract node names from the mutation query to track what was created/modified\n                let extractedNodes = [];\n                \n                // Handle different mutation query patterns\n                if (generatedQuery.includes('DELETE')) {\n                  // For DELETE queries, extract from patterns like DELETE (u:User {name: \"John\"}) or MATCH (u:User {name: \"John\"}) DELETE u\n                  const deleteMatches = generatedQuery.match(/\\{name:\\s*['\"]([^'\"]+)['\"]\\}/g);\n                  if (deleteMatches) {\n                    extractedNodes = deleteMatches.map(match => {\n                      const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                      return nameMatch ? nameMatch[1] : null;\n                    }).filter(Boolean);\n                  }\n                } else if (generatedQuery.includes('SET')) {\n                  // For SET queries, extract from MATCH clause like MATCH (u:User {name: \"John\"}) SET u.role = 'admin'\n                  const matchClause = generatedQuery.match(/MATCH\\s*\\([^)]*\\{name:\\s*['\"]([^'\"]+)['\"][^}]*\\}\\)/i);\n                  if (matchClause) {\n                    extractedNodes = [matchClause[1]];\n                  }\n                } else {\n                  // For CREATE/MERGE queries, extract from {name: \"nodeName\"} patterns\n                  const nodeMatches = generatedQuery.match(/\\{([^}]+)\\}/g);\n                  extractedNodes = nodeMatches ? \n                    nodeMatches.map(match => {\n                      const nameMatch = match.match(/name:\\s*['\"]([^'\"]+)['\"]/);\n                      return nameMatch ? nameMatch[1] : null;\n                    }).filter(Boolean) : [];\n                }\n                \n                setMutatedNodes(extractedNodes);\n                setLastAction('mutation');\n                \n                // Immediately return to default query without any delay\n                const defaultQuery = `\n                  MATCH (u:User)-[r:CONNECTED_TO]->(v:User)\n                  RETURN u.name AS source, u.role AS sourceRole, u.location AS sourceLocation, u.website AS sourceWebsite, \n                         v.name AS target, v.role AS targetRole, v.location AS targetLocation, v.website AS targetWebsite\n                `;\n                await loadData(null, defaultQuery);\n              }\n              \n              // Clear the input after 3 seconds\n              setTimeout(() => {\n                setInputValue(\"\");\n              }, 3000);\n            }\n            \n            } catch (error) {\n              console.error(\"Flowise call failed:\", error);\n            }\n        };\n\n        // Helper function to check if a node is new (created via NFC)\n        const isNewNode = (node) => {\n          return node.name === latestNode;\n        };\n\n        const handleNodeClick = (node) => {\n          if (!node) return;\n          setSelectedNode(node);\n          setEditedNode({ ...node });\n          setFocusNode(node.name);\n          setClickedNode(node.name);\n          setLastAction('click');\n          \n          // Clear relationship note when clicking a different node\n          setRelationshipNote(\"\");\n          \n          // Update user activity when clicking nodes\n          updateUserActivity();\n          \n          // Clear search when clicking a node to avoid zoom conflicts\n          setInputValue(\"\");\n        };\n\n        const handleNodeHover = (node) => {\n          if (node) {\n            setFocusNode(node.name);\n          } else {\n            setFocusNode(null);\n          }\n        };\n\n        const handleLinkClick = async (link) => {\n          if (!link) return;\n          \n          const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n          const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n          \n          console.log(`Link clicked: ${sourceName} -> ${targetName}`);\n          \n          const session = driver.session();\n          try {\n            // Get relationship data including notes\n            const relationshipResult = await session.run(\n              `MATCH (source:User {name: $sourceName})-[r:CONNECTED_TO]->(target:User {name: $targetName})\n               RETURN r.note as note, source.name as sourceName, target.name as targetName`,\n              { sourceName: sourceName, targetName: targetName }\n            );\n            \n            if (relationshipResult.records.length > 0) {\n              const record = relationshipResult.records[0];\n              const note = record.get('note');\n              \n              setSelectedLink(link);\n              setRelationshipData({\n                sourceName: sourceName,\n                targetName: targetName,\n                note: note\n              });\n              \n              console.log(`Relationship data: ${sourceName} -> ${targetName}, Note: ${note}`);\n            }\n          } catch (error) {\n            console.error(\"Error fetching relationship data:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const handleLinkHover = async (link) => {\n          if (!link) {\n            setHoveredLink(null);\n            return;\n          }\n          \n          const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n          const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n          \n          const session = driver.session();\n          try {\n            // Get relationship data including notes\n            const relationshipResult = await session.run(\n              `MATCH (source:User {name: $sourceName})-[r:CONNECTED_TO]->(target:User {name: $targetName})\n               RETURN r.note as note, source.name as sourceName, target.name as targetName`,\n              { sourceName: sourceName, targetName: targetName }\n            );\n            \n            if (relationshipResult.records.length > 0) {\n              const record = relationshipResult.records[0];\n              const note = record.get('note');\n              \n              setHoveredLink({\n                link: link,\n                sourceName: sourceName,\n                targetName: targetName,\n                note: note\n              });\n            }\n          } catch (error) {\n            console.error(\"Error fetching relationship data:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const handleEditChange = (event) => {\n          const { name, value } = event.target;\n          setEditedNode((prev) => ({\n            ...prev,\n            [name]: value,\n          }));\n        };\n\n        const saveNodeChanges = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          const newName = capitalizeWords(editedNode.name);\n          const oldName = selectedNode.name;\n\n          // Don't do anything if the name hasn't changed\n          if (newName === oldName) {\n            setSelectedNode(null); // Close the panel\n            return;\n          }\n\n          const session = driver.session();\n          try {\n            // First, check if a node with the new name already exists\n            const existingNodeCheck = await session.run(\n              `MATCH (u:User {name: $newName}) RETURN u`,\n              { newName: newName }\n            );\n\n            if (existingNodeCheck.records.length > 0) {\n              // A node with the new name already exists - merge them\n              console.log(`Node with name \"${newName}\" already exists, merging with existing node...`);\n              \n              // Get the existing node's properties\n              const existingNode = existingNodeCheck.records[0].get('u').properties;\n              \n              // Merge properties: keep non-empty values from either node\n              const mergedRole = existingNode.role && existingNode.role !== '' ? existingNode.role : editedNode.role;\n              const mergedLocation = existingNode.location && existingNode.location !== '' ? existingNode.location : editedNode.location;\n              const mergedWebsite = existingNode.website && existingNode.website !== '' ? existingNode.website : editedNode.website;\n              \n              // Efficiently merge all relationships and delete old node in a single operation\n              await session.run(\n                `MATCH (old:User {name: $oldName})\n                 OPTIONAL MATCH (old)-[r1:CONNECTED_TO]->(other1)\n                 OPTIONAL MATCH (other2)-[r2:CONNECTED_TO]->(old)\n                 WITH old, collect(DISTINCT other1) as outgoing, collect(DISTINCT other2) as incoming\n                 MATCH (existing:User {name: $newName})\n                 \n                 // Create outgoing relationships (avoiding self-connections and duplicates)\n                 FOREACH (other IN outgoing |\n                   FOREACH (x IN CASE WHEN other.name <> $newName AND NOT EXISTS((existing)-[:CONNECTED_TO]->(other)) THEN [1] ELSE [] END |\n                     CREATE (existing)-[:CONNECTED_TO]->(other)\n                   )\n                 )\n                 \n                 // Create incoming relationships (avoiding self-connections and duplicates)\n                 FOREACH (other IN incoming |\n                   FOREACH (x IN CASE WHEN other.name <> $newName AND NOT EXISTS((other)-[:CONNECTED_TO]->(existing)) THEN [1] ELSE [] END |\n                     CREATE (other)-[:CONNECTED_TO]->(existing)\n                   )\n                 )\n                 \n                 // Delete the old node\n                 DETACH DELETE old`,\n                { oldName: oldName, newName: newName }\n              );\n              \n              // Update the existing node with merged properties\n              await session.run(\n                `MATCH (u:User {name: $newName})\n                 SET u.role = $role, u.location = $location, u.website = $website`,\n                {\n                  newName: newName,\n                  role: mergedRole,\n                  location: mergedLocation,\n                  website: mergedWebsite\n                }\n              );\n              \n              console.log(`Successfully merged nodes. New node \"${newName}\" has properties:`, { mergedRole, mergedLocation, mergedWebsite });\n              \n              // Focus on the merged node\n              await loadData(newName);\n              setSelectedNode(null); // Close the panel\n            } else {\n              // No existing node with the new name, just update the current node\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName`,\n                {\n                  oldName: oldName,\n                  newName: newName,\n                }\n              );\n              await loadData(newName); // Keep the edited node as latestNode\n              setSelectedNode(null); // Close the panel\n            }\n          } catch (error) {\n            console.error(\"Error updating node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const saveNewNodeProfile = async () => {\n          if (!editedNode || !selectedNode) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          const session = driver.session();\n          try {\n            await session.run(\n              `MATCH (u:User {name: $oldName}) \n              SET u.name = $newName, u.role = $role, u.location = $location, u.website = $website`,\n              {\n                oldName: selectedNode.name,\n                newName: capitalizeWords(editedNode.name),\n                role: editedNode.role || '',\n                location: editedNode.location || '',\n                website: editedNode.website || ''\n              }\n            );\n            await loadData(capitalizeWords(editedNode.name));\n            setSelectedNode(null); // Close the panel\n          } catch (error) {\n            console.error(\"Error updating new node profile:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const saveRelationshipNote = async () => {\n          if (!selectedNode || !relationshipNote.trim()) return;\n\n          const session = driver.session();\n          try {\n            let sourceName, targetName;\n            \n            if (showNfcRelationshipPopup) {\n              // This is an NFC operation - use the tracked connection\n              if (currentNfcConnection) {\n                sourceName = currentNfcConnection.source;\n                targetName = currentNfcConnection.target;\n              } else {\n                // Fallback: try to find the connection\n                const fallbackResult = await session.run(\n                  `MATCH (source:User)-[r:CONNECTED_TO]->(target:User {name: $holderName})\n                   RETURN source.name as sourceName, target.name as targetName\n                   ORDER BY source.name DESC\n                   LIMIT 1`,\n                  { holderName: selectedNode.name }\n                );\n                \n                if (fallbackResult.records.length > 0) {\n                  const record = fallbackResult.records[0];\n                  sourceName = record.get('sourceName');\n                  targetName = record.get('targetName');\n                }\n              }\n            } else {\n              // This is a regular relationship note - use the existing logic\n              const nfcHolderResult = await session.run(\n                `MATCH (existing:User {name: $existingName})-[r:CONNECTED_TO]->(holder:User)\n                 RETURN holder.name as holderName`,\n                { existingName: selectedNode.name }\n              );\n              \n              const nfcHolderName = nfcHolderResult.records[0]?.get('holderName');\n              \n              if (nfcHolderName) {\n                sourceName = selectedNode.name;\n                targetName = nfcHolderName;\n              }\n            }\n            \n            if (sourceName && targetName) {\n              // Add the relationship note as a property to the connection\n              const updateResult = await session.run(\n                `MATCH (source:User {name: $sourceName})-[r:CONNECTED_TO]->(target:User {name: $targetName})\n                 SET r.note = $note\n                 RETURN r.note as updatedNote`,\n                {\n                  sourceName: sourceName,\n                  targetName: targetName,\n                  note: relationshipNote.trim()\n                }\n              );\n              \n              if (updateResult.records.length > 0) {\n                const updatedNote = updateResult.records[0].get('updatedNote');\n              }\n            }\n            \n            setSelectedNode(null); // Close the panel\n            setRelationshipNote(\"\"); // Clear the note\n            setPendingNfcName(\"\"); // Clear pending name\n            setShowNfcRelationshipPopup(false); // Close NFC relationship popup\n            setCurrentNfcConnection(null); // Clear the tracked connection\n          } catch (error) {\n            console.error(\"Error saving relationship note:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const handleNfcNameSubmit = async () => {\n          if (!nfcNameInput.trim()) return;\n\n          // Helper function to capitalize first letter of each word\n          const capitalizeWords = (str) => {\n            if (!str) return str;\n            return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n          };\n\n          const capitalizedName = capitalizeWords(nfcNameInput.trim());\n          setPendingNfcName(capitalizedName);\n\n          const session = driver.session();\n          try {\n            // Check if a node with this name already exists\n            const existingNodeCheck = await session.run(\n              `MATCH (u:User {name: $name}) RETURN u`,\n              { name: capitalizedName }\n            );\n\n            if (existingNodeCheck.records.length > 0) {\n              // Node exists - merge visitor into existing node and show connection note popup\n              console.log(`Node \"${capitalizedName}\" exists, merging visitor into existing node`);\n              \n              const existingNode = existingNodeCheck.records[0].get('u').properties;\n              \n              // Get the NFC holder name from the visitor's connection\n              const nfcHolderResult = await session.run(\n                `MATCH (visitor:User {name: $visitorName})-[r:CONNECTED_TO]->(holder:User)\n                 RETURN holder.name as holderName`,\n                { visitorName: latestNode }\n              );\n              \n              const nfcHolderName = nfcHolderResult.records[0]?.get('holderName');\n              \n              if (nfcHolderName) {\n                // Store the connection details for the relationship note\n                setCurrentNfcConnection({\n                  source: capitalizedName,\n                  target: nfcHolderName\n                });\n                \n                // Check if the existing node is already connected to the NFC holder\n                const existingConnectionCheck = await session.run(\n                  `MATCH (existing:User {name: $existingName})-[r:CONNECTED_TO]->(holder:User {name: $holderName})\n                   RETURN r`,\n                  { existingName: capitalizedName, holderName: nfcHolderName }\n                );\n                \n                if (existingConnectionCheck.records.length === 0) {\n                  // No existing connection, create one\n                  await session.run(\n                    `MATCH (existing:User {name: $existingName}), (holder:User {name: $holderName})\n                     CREATE (existing)-[:CONNECTED_TO]->(holder)`,\n                    { existingName: capitalizedName, holderName: nfcHolderName }\n                  );\n                  console.log(`Created new connection from \"${capitalizedName}\" to \"${nfcHolderName}\"`);\n                } else {\n                  console.log(`Connection from \"${capitalizedName}\" to \"${nfcHolderName}\" already exists`);\n                }\n                \n                // Delete the visitor node\n                await session.run(\n                  `MATCH (visitor:User {name: $visitorName})\n                   DETACH DELETE visitor`,\n                  { visitorName: latestNode }\n                );\n                \n                console.log(`Merged visitor into existing node \"${capitalizedName}\"`);\n              }\n              \n              setShowNfcNamePopup(false);\n              setNfcNameInput(\"\");\n              setNfcRoleInput(\"\");\n              setSelectedNode(existingNode);\n              setRelationshipNote(\"\");\n              setShowNfcRelationshipPopup(true); // Show NFC relationship note popup\n              \n              // Don't reload data to avoid triggering duplicate cleanup again\n              // Just focus on the existing node\n              console.log(`Merged visitor into existing node \"${capitalizedName}\", focusing on existing node`);\n              \n              // Update the latestNode to the existing node so it gets focused\n              // We'll let the user manually refresh if needed\n            } else {\n              // Node doesn't exist - show profile completion popup\n              console.log(`Node \"${capitalizedName}\" doesn't exist, showing profile completion popup`);\n              setShowNfcNamePopup(false);\n              setNfcNameInput(\"\");\n              setNfcRoleInput(\"\");\n              setShowProfilePopup(true);\n              setSelectedNode({ name: capitalizedName, role: nfcRoleInput, location: \"\", website: \"\" });\n              setEditedNode({ name: capitalizedName, role: nfcRoleInput, location: \"\", website: \"\" });\n            }\n          } catch (error) {\n            console.error(\"Error checking for existing node:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        const saveNewProfileFromNfc = async () => {\n          if (!editedNode || !pendingNfcName) return;\n\n          const session = driver.session();\n          try {\n            // Update the visitor node with the new name and profile information\n            await session.run(\n              `MATCH (visitor:User {name: $visitorName}) \n               SET visitor.name = $newName, visitor.role = $role, visitor.location = $location, visitor.website = $website`,\n              {\n                visitorName: latestNode,\n                newName: editedNode.name,\n                role: editedNode.role || '',\n                location: editedNode.location || '',\n                website: editedNode.website || ''\n              }\n            );\n            \n            console.log(`Updated visitor profile: ${editedNode.name} with role: ${editedNode.role}, location: ${editedNode.location}, website: ${editedNode.website}`);\n            setShowProfilePopup(false);\n            \n            // Get the NFC holder name from the visitor's connection\n            const nfcHolderResult = await session.run(\n              `MATCH (visitor:User {name: $visitorName})-[r:CONNECTED_TO]->(holder:User)\n               RETURN holder.name as holderName`,\n              { visitorName: editedNode.name }\n            );\n            \n            const nfcHolderName = nfcHolderResult.records[0]?.get('holderName');\n            \n            if (nfcHolderName) {\n              // Store the connection details for the relationship note\n              setCurrentNfcConnection({\n                source: editedNode.name,\n                target: nfcHolderName\n              });\n              \n              // Show connection note popup for the new user\n              setSelectedNode({ name: nfcHolderName, role: \"\", location: \"\", website: \"\" });\n              setRelationshipNote(\"\");\n              setShowNfcRelationshipPopup(true);\n            } else {\n              // No NFC holder found, just close the popup\n              setSelectedNode(null);\n              setEditedNode(null);\n              setPendingNfcName(\"\");\n              setCurrentNfcConnection(null);\n            }\n            \n            // Reload data to show the updated node\n            await loadData(editedNode.name);\n          } catch (error) {\n            console.error(\"Error saving new profile from NFC:\", error);\n          } finally {\n            session.close();\n          }\n        };\n\n        // Helper function to generate human-readable answers from query results\n        const generateAnalyticalAnswer = (question, result, query) => {\n          const questionLower = question.toLowerCase();\n          const records = result.records;\n          \n          // Debug logging to see what's happening\n          console.log(\"Analytical question:\", question);\n          console.log(\"Generated query:\", query);\n          console.log(\"Query result:\", result);\n          console.log(\"Records:\", records);\n          \n          if (records.length === 0) {\n            return \"I couldn't find any data matching your question.\";\n          }\n\n          // Handle count queries\n          if (questionLower.includes('how many') || questionLower.includes('count')) {\n            const count = records[0].get(0);\n            \n            // Debug: Log the actual query and result for count queries\n            console.log(\"Count query result:\", count);\n            console.log(\"Question was:\", question);\n            \n            if (questionLower.includes('artist')) {\n              return `There are ${count} artists.`;\n            } else if (questionLower.includes('user')) {\n              return `There are ${count} users.`;\n            } else if (questionLower.includes('connection') || questionLower.includes('relationship')) {\n              return `There are ${count} connections.`;\n            } else if (questionLower.includes('craftsman')) {\n              return `There are ${count} craftsmen.`;\n            } else if (questionLower.includes('entrepreneur')) {\n              return `There are ${count} entrepreneurs.`;\n            } else if (questionLower.includes('educational institution') || questionLower.includes('institution')) {\n              return `There are ${count} educational institutions.`;\n            } else if (questionLower.includes('holder')) {\n              return `There are ${count} holder.`;\n            } else if (questionLower.includes('program')) {\n              return `There are ${count} program.`;\n            } else {\n              return `The count is ${count}.`;\n            }\n          }\n\n          // Handle location-based queries\n          if (questionLower.includes('where') || questionLower.includes('location')) {\n            let locations = [];\n            \n            // Try different case variations for location field\n            if (records[0].keys && records[0].keys.includes('location')) {\n              locations = records.map(record => record.get('location')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Location')) {\n              locations = records.map(record => record.get('Location')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_location')) {\n              locations = records.map(record => record.get('u_location')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Location')) {\n              locations = records.map(record => record.get('u_Location')).filter(Boolean);\n            } else {\n              locations = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            const uniqueLocations = [...new Set(locations)];\n            if (uniqueLocations.length === 1) {\n              return `The location is ${uniqueLocations[0]}.`;\n            } else {\n              return `The locations found are: ${uniqueLocations.join(', ')}.`;\n            }\n          }\n\n          // Handle role-based queries\n          if (questionLower.includes('role') || questionLower.includes('what do')) {\n            let roles = [];\n            \n            // Try different case variations for role field\n            if (records[0].keys && records[0].keys.includes('role')) {\n              roles = records.map(record => record.get('role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Role')) {\n              roles = records.map(record => record.get('Role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_role')) {\n              roles = records.map(record => record.get('u_role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Role')) {\n              roles = records.map(record => record.get('u_Role')).filter(Boolean);\n            } else {\n              roles = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            const uniqueRoles = [...new Set(roles)];\n            if (uniqueRoles.length === 1) {\n              return `The role is ${uniqueRoles[0]}.`;\n            } else {\n              return `The roles found are: ${uniqueRoles.join(', ')}.`;\n            }\n          }\n\n          // Handle name-based queries\n          if (questionLower.includes('who') || questionLower.includes('name')) {\n            let names = [];\n            \n            // Try different case variations for name field\n            if (records[0].keys && records[0].keys.includes('name')) {\n              names = records.map(record => record.get('name')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Name')) {\n              names = records.map(record => record.get('Name')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_name')) {\n              names = records.map(record => record.get('u_name')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Name')) {\n              names = records.map(record => record.get('u_Name')).filter(Boolean);\n            } else {\n              names = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            if (names.length === 1) {\n              return `The person is ${names[0]}.`;\n            } else if (names.length <= 5) {\n              return `The people are: ${names.join(', ')}.`;\n            } else {\n              return `Found ${names.length} people: ${names.slice(0, 3).join(', ')} and ${names.length - 3} more.`;\n            }\n          }\n\n          // Handle \"what roles exist\" specifically\n          if (questionLower.includes('what roles exist') || questionLower.includes('what roles are there')) {\n            // Try to extract roles from different possible result formats\n            let roles = [];\n            \n            // Check if the query returned role data - try different case variations\n            if (records[0].keys && records[0].keys.includes('role')) {\n              roles = records.map(record => record.get('role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('Role')) {\n              roles = records.map(record => record.get('Role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_role')) {\n              roles = records.map(record => record.get('u_role')).filter(Boolean);\n            } else if (records[0].keys && records[0].keys.includes('u_Role')) {\n              roles = records.map(record => record.get('u_Role')).filter(Boolean);\n            } else {\n              // Try to get the first column as roles\n              roles = records.map(record => record.get(0)).filter(Boolean);\n            }\n            \n            const uniqueRoles = [...new Set(roles)];\n            if (uniqueRoles.length > 0) {\n              return `The roles found in the network are: ${uniqueRoles.join(', ')}.`;\n            } else {\n              return \"I couldn't find any role information in the network.\";\n            }\n          }\n\n          // Default response for other queries\n          const resultCount = records.length;\n          if (resultCount === 1) {\n            return \"I found 1 result matching your question.\";\n          } else {\n            return `I found ${resultCount} results matching your question.`;\n          }\n        };\n\n        // Helper function to display analytical answers\n        const displayAnalyticalAnswer = (answer, question) => {\n          setAnalyticalAnswer({ answer, question });\n          setShowAnalyticalModal(true);\n          \n          // Auto-hide after 8 seconds\n          setTimeout(() => {\n            setShowAnalyticalModal(false);\n            setAnalyticalAnswer(null);\n          }, 8000);\n        };\n\n\nreturn (\n    <div width=\"95%\">\n      <input\n        type=\"text\"\n        placeholder=\"Show me all the entrepreneurs connected to USC...\"\n        style={{ display: \"block\", width: \"95%\", height: \"40px\", margin: \"0 auto\", textAlign: \"center\", padding: \"8px\", border: \"1px solid #ccc\", borderRadius: \"4px\" }}\n        value={inputValue}\n        onChange={handleInputChange}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit(e);\n          }\n        }}\n      />\n      <button id=\"visualize\" onClick={() => window.open(\"https://awuchen.github.io/greif-network-3d/\", \"_blank\")}>Visualize3D</button>\n      <button id=\"info\" onClick={() => window.open(\"https://www.hako.soooul.xyz/drafts/washi\", \"_blank\")}>Info</button>\n      \n\n      \n      {/* Mutation processing indicator */}\n      {processingMutation && (\n        <div style={{\n          position: \"fixed\",\n          top: \"60px\",\n          right: \"10px\",\n          padding: \"8px 12px\",\n          backgroundColor: \"#9C27B0\",\n          color: \"white\",\n          borderRadius: \"4px\",\n          fontSize: \"12px\",\n          zIndex: 1000,\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: \"8px\"\n        }}>\n          <div style={{\n            width: \"8px\",\n            height: \"8px\",\n            borderRadius: \"50%\",\n            backgroundColor: \"#fff\",\n            animation: \"pulse 0.5s infinite\"\n          }}></div>\n          Processing Mutation...\n        </div>\n      )}\n\n      {/* Analytical Answer Modal */}\n      {showAnalyticalModal && analyticalAnswer && (\n        <div \n          style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000 }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <h3>Network Analysis</h3>\n          <p><strong>Question:</strong> \"{analyticalAnswer.question}\"</p>\n          <p><strong>Answer:</strong> {analyticalAnswer.answer}</p>\n        </div>\n      )}\n      \n\n      \n      <style>{`\n        @keyframes pulse {\n          0% { opacity: 1; }\n          50% { opacity: 0.5; }\n          100% { opacity: 1; }\n        }\n        \n        @keyframes breathe {\n          0%, 100% { \n            transform: scale(1);\n            opacity: 1;\n          }\n          50% { \n            transform: scale(1.5);\n            opacity: 0.7;\n          }\n        }\n      `}</style>\n\n  <ForceGraph2D\n  ref={fgRef}\n  graphData={data}\n  nodeId=\"name\"\n  nodeLabel={(node) => node.role || \"No Program Specified\"}\n  linkLabel={(link) => {\n    if (hoveredLink && hoveredLink.link === link) {\n      return hoveredLink.note || \"No note added\";\n    }\n    return null;\n  }}\n\n  onNodeClick={handleNodeClick}\n  onNodeHover={handleNodeHover}\n  onLinkClick={handleLinkClick}\n  onLinkHover={handleLinkHover}\n\n  onBackgroundClick={() => {\n    setFocusNode(null);\n    setClickedNode(null);\n    setLastAction(null);\n    setMutatedNodes([]);\n    setSelectedNode(null);\n    setShowAnalyticalModal(false);\n    setAnalyticalAnswer(null);\n    setSelectedLink(null);\n    setRelationshipData({});\n  }}\n  nodeCanvasObject={(node, ctx) => {\n    const isHighlighted =\n      inputValue &&\n      (node.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n        (node.location && node.location.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.role && node.role.toLowerCase().includes(inputValue.toLowerCase())) ||\n        (node.website && node.website.toLowerCase().includes(inputValue.toLowerCase())));\n    const isNDegree = visibilityNodes.has(node.name);\n\n    ctx.globalAlpha = isNDegree ? 1.0 : 0.2;\n    \n    // Add breathing effect when user is idle or transitioning\n    let nodeRadius = 6;\n    const now = Date.now();\n    \n    // Frame rate optimization: only update every 60ms (16fps) for better performance\n    const frameRate = 60;\n    const time = Math.floor(now / frameRate) * frameRate * 0.001;\n    \n    if (!isUserActive) {\n      // Optimized breathing effect with cached calculations\n      // Use a simpler sine wave with reduced frequency for better performance\n      const breathingScale = 1 + 0.1 * Math.sin(time * 0.8); // Reduced frequency from 1.5 to 0.8\n      nodeRadius = 6 * breathingScale;\n    } else if (scaleTransitionStart && (now - scaleTransitionStart) < scaleTransitionDuration) {\n      // Optimized transition with cached calculations\n      const transitionProgress = Math.min((now - scaleTransitionStart) / scaleTransitionDuration, 1);\n      // Cache the breathing scale calculation\n      const breathingScale = 1 + 0.1 * Math.sin((scaleTransitionStart * 0.001) * 0.8);\n      const targetScale = 1;\n      const currentScale = breathingScale + (targetScale - breathingScale) * transitionProgress;\n      nodeRadius = 6 * currentScale;\n    }\n    \n    // Use latestNode for editing (black), pollingFocusNode for viewing (blue), or white for normal\n    let fillColor = \"white\";\n    if (node.name === latestNode) {\n      fillColor = \"black\"; // Editable node\n    } else if (node.name === pollingFocusNode) {\n      fillColor = \"green\"; // Non-editable polling focus\n    }\n    \n    // Add subtle color shift during breathing animation\n    if (!isUserActive && fillColor === \"white\") {\n      // Optimized color shift with reduced frequency and frame rate optimization\n      const colorShift = Math.sin(time * 0.8) * 0.1;\n      // Shift towards a very light blue during breathing\n      fillColor = `rgb(${255 + colorShift * 50}, ${255 + colorShift * 30}, ${255 + colorShift * 100})`;\n    } else if (scaleTransitionStart && (now - scaleTransitionStart) < scaleTransitionDuration && fillColor === \"white\") {\n      // Optimized color transition with cached calculations\n      const transitionProgress = (now - scaleTransitionStart) / scaleTransitionDuration;\n      // Cache the color shift calculation\n      const lastColorShift = Math.sin((scaleTransitionStart * 0.001) * 0.8) * 0.1;\n      const currentColorShift = lastColorShift * (1 - transitionProgress);\n      fillColor = `rgb(${255 + currentColorShift * 50}, ${255 + currentColorShift * 30}, ${255 + currentColorShift * 100})`;\n    }\n    \n    // Add subtle glow effect during breathing animation\n    // Removed shadow and alpha effects for performance\n    \n    ctx.fillStyle = fillColor;\n    ctx.strokeStyle = isHighlighted ? \"red\" : \"black\";\n    ctx.lineWidth = isHighlighted ? 3 : 2;\n\n    ctx.beginPath();\n    ctx.arc(node.x || Math.random() * 500, node.y || Math.random() * 500, nodeRadius, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n\n    // Reset shadow for text\n    ctx.shadowBlur = 0;\n    ctx.fillStyle = \"gray\";\n    \n    // Extract first name from full name\n    const firstName = node.name.split(' ')[0];\n    ctx.fillText(firstName, node.x + 10, node.y);\n\n    ctx.globalAlpha = 1.0; // Reset alpha for next node\n  }}\n  linkColor={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    \n    // Check if this link is being hovered\n    const isHovered = hoveredLink && hoveredLink.link === link;\n    \n    if (isHovered) {\n      return '#000'; // Black when hovered\n    }\n    \n    return isConnected ? '#999' : '#ccc';\n  }}\n  linkOpacity={(link) => {\n    const sourceName = typeof link.source === 'object' ? link.source.name : link.source;\n    const targetName = typeof link.target === 'object' ? link.target.name : link.target;\n    const isConnected = visibilityNodes.has(sourceName) && visibilityNodes.has(targetName);\n    return isConnected ? 1.0 : 0.15;\n  }}\n\n  linkCurvature={0.2}\n  linkDirectionalArrowRelPos={1}\n  linkDirectionalArrowLength={5}\n  />\n\n  {/* NFC Name Input Popup */}\n  {showNfcNamePopup && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Enter Info</h3>\n      <p><strong>Name:</strong>\n      <input \n        value={nfcNameInput} \n        onChange={(e) => setNfcNameInput(e.target.value)}\n        placeholder=\"Enter your name\" \n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            handleNfcNameSubmit();\n          }\n        }}\n      /></p>\n\n      <p><strong>Program:</strong>\n      <input \n        value={nfcRoleInput} \n        onChange={(e) => setNfcRoleInput(e.target.value)}\n        placeholder=\"e.g., MSEI, MSSE, MSBA, MBA, etc.\" \n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            handleNfcNameSubmit();\n          }\n        }}\n      /></p>\n\n      <p><button onClick={handleNfcNameSubmit} style={{ marginRight: \"10px\", padding: \"8px 16px\" }}>Continue</button>\n      <button onClick={() => {\n        setShowNfcNamePopup(false);\n        setNfcNameInput(\"\");\n        setNfcRoleInput(\"\");\n      }} style={{ padding: \"8px 16px\" }}>Cancel</button></p>\n    </div>\n  )}\n\n  {/* Profile Completion Popup (for new nodes) */}\n  {showProfilePopup && selectedNode && editedNode && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Complete Your Profile</h3>\n      <p><strong>Name:</strong>\n      <input \n      name=\"name\" \n      value={editedNode.name} \n        placeholder=\"Enter your name\" \n      onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><strong>Program:</strong>\n      <input \n        name=\"role\" \n        value={editedNode.role || \"\"} \n        placeholder=\"e.g., MSEI, MBA, BS, MS, PhD\" \n        onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><strong>Location:</strong>\n      <input \n        name=\"location\" \n        value={editedNode.location || \"\"} \n        placeholder=\"e.g., Los Angeles, CA\" \n        onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><strong>Email/Website:</strong>\n      <input \n        name=\"website\" \n        value={editedNode.website || \"\"} \n        placeholder=\"your.email@example.com\" \n        onChange={handleEditChange}\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\" }}\n      /></p>\n\n      <p><button onClick={saveNewProfileFromNfc} style={{ marginRight: \"10px\", padding: \"8px 16px\" }}>Save Profile</button>\n      <button onClick={() => setShowProfilePopup(false)} style={{ padding: \"8px 16px\" }}>Cancel</button></p>\n    </div>\n  )}\n\n  {/* Regular Node Info Popup (for clicking on any node) */}\n  {selectedNode && !showProfilePopup && !showNfcNamePopup && !showNfcRelationshipPopup && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Network Info</h3>\n      <p><strong>Name:</strong> {selectedNode?.name}</p>\n      {selectedNode?.role && <p><strong>Program:</strong> {selectedNode.role}</p>}\n      {selectedNode?.location && <p><strong>Location:</strong> {selectedNode.location}</p>}\n      {selectedNode?.website && <p><strong>Contact:</strong>{\" \"}\n        <a href={`mailto:${selectedNode.website}`}>\n        {selectedNode.website.length > 30 \n          ? `${selectedNode.website.substring(0, 30)}...`\n        : selectedNode.website}\n        </a>\n      </p>}\n      \n\n    </div>\n  )}\n\n  {/* NFC Relationship Note Popup (only during NFC flow) */}\n  {showNfcRelationshipPopup && selectedNode && (\n    <div \n      style={{ position: \"absolute\", top: \"20%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Add Connection Note</h3>\n      <p><strong>Connected to:</strong> {selectedNode?.name}</p>\n      {selectedNode?.role && <p><strong>Program:</strong> {selectedNode.role}</p>}\n      {selectedNode?.location && <p><strong>Location:</strong> {selectedNode.location}</p>}\n      {selectedNode?.website && <p><strong>Contact:</strong>{\" \"}\n        <a href={`mailto:${selectedNode.website}`}>\n          {selectedNode.website.length > 30 \n            ? `${selectedNode.website.substring(0, 30)}...`\n          : selectedNode.website}\n        </a>\n      </p>}\n      \n      <p><strong>Note:</strong>\n      <textarea \n        value={relationshipNote} \n        onChange={(e) => setRelationshipNote(e.target.value)}\n        placeholder=\"e.g., Met at USC networking event, Introduced by mutual friend, Worked together on project...\"\n        style={{ width: \"100%\", marginTop: \"5px\", padding: \"5px\", minHeight: \"80px\", resize: \"vertical\" }}\n      /></p>\n\n      <p><button onClick={saveRelationshipNote} style={{ padding: \"8px 16px\" }}>Save</button></p>\n    </div>\n  )}\n\n  {/* Relationship Note Popup */}\n  {selectedLink && relationshipData && (\n    <div \n      style={{ position: \"absolute\", top: \"30%\", left: \"50%\", transform: \"translate(-50%, -50%)\", padding: \"20px\", backgroundColor: \"white\", border: \"1px solid black\", boxShadow: \"0px 0px 10px rgba(0, 0, 0, 0.3)\", zIndex: 1000, minWidth: \"300px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <h3>Connection Details</h3>\n      <p><strong>From:</strong> {relationshipData.sourceName}</p>\n      <p><strong>To:</strong> {relationshipData.targetName}</p>\n      \n      {relationshipData.note ? (\n        <>\n          <p><strong>Note:</strong></p>\n          <div style={{ \n            backgroundColor: \"#f5f5f5\", \n            padding: \"10px\", \n            borderRadius: \"4px\", \n            marginTop: \"5px\",\n            fontStyle: \"italic\"\n          }}>\n            \"{relationshipData.note}\"\n          </div>\n        </>\n      ) : (\n        <p style={{ color: \"#666\", fontStyle: \"italic\" }}>No note added yet.</p>\n      )}\n      \n\n    </div>\n  )}\n\n\n\n  </div>\n  );\n    };\n\n\n\n\n\n    export default CypherViz;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport CypherViz from './CypherViz';\r\n\r\nfunction App({driver}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <CypherViz driver={driver}></CypherViz>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport * as neo4j from  'neo4j-driver';\r\n\r\nconst driver = neo4j.driver(\r\n  process.env.NEO4J_URI || 'neo4j+s://23f1f8d0.databases.neo4j.io',\r\n  neo4j.auth.basic(\r\n    process.env.NEO4J_USER || 'neo4j',\r\n    process.env.NEO4J_PASSWORD || 'xQ3FQK4HZq5o-lbJJD5yHrTSdJQiejLW3iiejdoGs_E'\r\n  ),\r\n  {\r\n    //encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',\r\n    //encrypted: process.env.NEO4J_ENCRYPTED = 'ENCRYPTION_ON',\r\n  }\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App driver={driver}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}